/*
Navicat Oracle Data Transfer
Oracle Client Version : 10.2.0.5.0

Source Server         : shu_rta
Source Server Version : 110200
Source Host           : 134.81.101.5:1521
Source Schema         : SERVICEDB

Target Server Type    : ORACLE
Target Server Version : 110200
File Encoding         : 65001

Date: 2020-07-31 11:12:21
*/


-- ----------------------------
-- Table structure for T_BPM_ACTIVITYTRACE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_ACTIVITYTRACE";
CREATE TABLE "SERVICEDB"."T_BPM_ACTIVITYTRACE" (
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NOT NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"MAINPID" VARCHAR2(100 BYTE) NULL ,
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"ACTIVITYDEFNAME" VARCHAR2(256 BYTE) NULL ,
"UNIQUEACTIVITYDEFID" VARCHAR2(512 BYTE) NULL ,
"PREVACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"PARENTACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"ACTIVITYSTATE" NUMBER NULL ,
"EXECSEQUENCENUM" NUMBER NULL ,
"PREDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"PROCESSENGINENAME" VARCHAR2(256 BYTE) NULL ,
"ACTIVITYTYPE" NUMBER NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_01" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_02" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_03" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_04" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_05" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_06" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_07" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_08" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_09" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_10" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_11" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_12" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_13" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_14" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_15" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_16" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_17" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_18" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_19" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_20" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_21" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_22" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_23" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_24" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_25" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_26" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_27" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_28" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_29" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_30" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_31" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_32" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_33" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_34" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_35" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_36" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_37" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_38" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_39" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_40" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_ACTIVITYTRACE" IS 'This table contains information about the activity, which is used for tracing purpose.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."ACTIVITYTRACEID" IS 'Unique instance identifier of the activity generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."BRANCHEXECUTIONID" IS 'Id of the execution to which this activity trace belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."PROCESSINSTANCEID" IS 'The id of the ProcessInstance to which this activity trace belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."MAINPID" IS 'The id of the Main Process Instance to which this activity trace belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."PROCESSDEFKEY" IS 'The unique key of the process definition to which this activity belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."ACTIVITYDEFID" IS 'This is unique in a given process definition. It maps to ID of the activity in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."ACTIVITYDEFNAME" IS 'This indicates the activity name. It maps to name of activity in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."UNIQUEACTIVITYDEFID" IS 'This is unique in a given process definition including call activity and subprocess.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."PREVACTIVITYINSTID" IS 'This indicates previous activity instance Id.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."PARENTACTIVITYINSTID" IS 'This indicates parent activity instance Id in case of callActivity and subprocess.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."STARTTIME" IS 'Time when the activity was started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."ENDTIME" IS 'Time when the activity was ended.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."ACTIVITYSTATE" IS 'The state of the activity. This will keep varying as the activity progresses.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."EXECSEQUENCENUM" IS 'A number assigned to the activity instance to capture its execution sequence.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."PREDACTIVITIES" IS 'Contains information about the predecessor activities. Currently only the previous tasks informations are captured.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."ACTIVITYTYPE" IS 'This indicates type of the activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ACTIVITYTRACE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_ACTIVITYTRACE_BAK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_ACTIVITYTRACE_BAK";
CREATE TABLE "SERVICEDB"."T_BPM_ACTIVITYTRACE_BAK" (
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"MAINPID" VARCHAR2(100 BYTE) NULL ,
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"ACTIVITYDEFNAME" VARCHAR2(256 BYTE) NULL ,
"UNIQUEACTIVITYDEFID" VARCHAR2(512 BYTE) NULL ,
"PREVACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"PARENTACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"ACTIVITYSTATE" NUMBER NULL ,
"EXECSEQUENCENUM" NUMBER NULL ,
"PREDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"PROCESSENGINENAME" VARCHAR2(256 BYTE) NULL ,
"ACTIVITYTYPE" NUMBER NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_01" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_02" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_03" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_04" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_05" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_06" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_07" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_08" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_09" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_10" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_11" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_12" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_13" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_14" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_15" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_16" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_17" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_18" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_19" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_20" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_21" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_22" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_23" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_24" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_25" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_26" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_27" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_28" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_29" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_30" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_31" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_32" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_33" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_34" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_35" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_36" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_37" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_38" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_39" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_40" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_BPM_BRANCHEXECUTION
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION";
CREATE TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION" (
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NOT NULL ,
"PARENTEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PARENTACTDEFID" VARCHAR2(256 BYTE) NULL ,
"PARENTACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHSTATE" NUMBER NOT NULL ,
"PREVIOUSSTATE" NUMBER NOT NULL ,
"BRANCHTYPE" NUMBER NULL ,
"ELEMENTLOOPCOUNTER" NUMBER NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"CURACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYSTATE" NUMBER NULL ,
"CREATETIME" DATE NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"LASTUPDATETIME" DATE NULL ,
"PREDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"JOINEDELEMENTIDS" VARCHAR2(2000 BYTE) NULL ,
"JOINEDTRANSITIONS" VARCHAR2(2000 BYTE) NULL ,
"METADATA" NUMBER(20) NULL ,
"PICREATETIME" DATE NULL ,
"ISEXECUTING" NUMBER(1) NULL ,
"PREVACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"SRCTRANSITIONID" VARCHAR2(512 BYTE) NULL ,
"ASYNCELEMENTDEFID" VARCHAR2(100 BYTE) NULL ,
"ASYNCRETRYCOUNT" NUMBER DEFAULT -1  NULL ,
"ASYNCELEMENTINSTID" VARCHAR2(100 BYTE) NULL ,
"CURELMNTSTARTTIME" DATE NULL ,
"NODEGROUPNAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION" IS 'This table contains information about the branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."BRANCHEXECUTIONID" IS 'Unique execution Id generated for branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."PARENTEXECUTIONID" IS 'Execution Id of parent of a branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."PARENTACTDEFID" IS 'Activity definition Id  from where fork happened or parent activity definiton Id of sub-process.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."PARENTACTIVITYID" IS 'Activity Id  from where fork happened or parent activity Id of sub-process.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."PROCESSINSTANCEID" IS 'Unique execution id generated by the engine for the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."BRANCHSTATE" IS 'Current state of the branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."PREVIOUSSTATE" IS 'Previous state of the execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."BRANCHTYPE" IS 'Type of the execution, it will be one of the BRANCH(1), SUB(2)';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."ELEMENTLOOPCOUNTER" IS 'If the current element instance of this execution is of type standard loop or multi-instance loop, then the loop index will be stored, else 0.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."CURACTIVITYDEFID" IS 'This is unique in a given process definition. It maps to ID of the activity in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."CURACTIVITYID" IS 'It maps to ID of the activity in the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."CURACTIVITYSTATE" IS 'State of the current executing activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."CREATETIME" IS 'Time when the execution was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."STARTTIME" IS 'Time when the execution was started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."ENDTIME" IS 'Time when the execution completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."LASTUPDATETIME" IS 'Time when this record was last updated.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."PREDACTIVITIES" IS 'Contains information about the predecessor actvities. Currently only the previous tasks informations are captured.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."JOINEDELEMENTIDS" IS 'Contains information about the joined element definition ids for current join in this branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."JOINEDTRANSITIONS" IS 'Contains information about the joined transition definition ids for current join in this branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."METADATA" IS 'This represents the meta data about the process instance. Each bit in this column specifies boolean info as below:';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."ISEXECUTING" IS 'This represents the Activity executing on this execution instance:
0:This is to indicate no activity is executing.
1:This is to indicate activity is executing.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."PREVACTIVITYINSTID" IS 'This indicates previous activity instance Id.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."SRCTRANSITIONID" IS 'This represents transition id of the source which created this execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."ASYNCELEMENTDEFID" IS 'The id of the async continue element from which async continue is triggered';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."ASYNCRETRYCOUNT" IS 'The retry count of async continue flow from this execution';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."ASYNCELEMENTINSTID" IS 'The id of the element instance from which async continue is triggered.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."CURELMNTSTARTTIME" IS 'The start time of current element instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."NODEGROUPNAME" IS 'Unique id to represent group of nodes in a cluster as a sub-cluster. Each node belongs to only one sub-cluster group of a cluster.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_BRANCHEXECUTION"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_BRANCHEXECUTION_BAK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION_BAK";
CREATE TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION_BAK" (
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PARENTEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PARENTACTDEFID" VARCHAR2(256 BYTE) NULL ,
"PARENTACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHSTATE" NUMBER NOT NULL ,
"PREVIOUSSTATE" NUMBER NOT NULL ,
"BRANCHTYPE" NUMBER NULL ,
"ELEMENTLOOPCOUNTER" NUMBER NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"CURACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYSTATE" NUMBER NULL ,
"CREATETIME" DATE NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"LASTUPDATETIME" DATE NULL ,
"PREDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"JOINEDELEMENTIDS" VARCHAR2(2000 BYTE) NULL ,
"JOINEDTRANSITIONS" VARCHAR2(2000 BYTE) NULL ,
"METADATA" NUMBER(20) NULL ,
"PICREATETIME" DATE NULL ,
"ISEXECUTING" NUMBER(1) NULL ,
"PREVACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"SRCTRANSITIONID" VARCHAR2(512 BYTE) NULL ,
"ASYNCELEMENTDEFID" VARCHAR2(100 BYTE) NULL ,
"ASYNCRETRYCOUNT" NUMBER NULL ,
"ASYNCELEMENTINSTID" VARCHAR2(100 BYTE) NULL ,
"CURELMNTSTARTTIME" DATE NULL ,
"NODEGROUPNAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_BPM_CLUSTER_LOCKS
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_CLUSTER_LOCKS";
CREATE TABLE "SERVICEDB"."T_BPM_CLUSTER_LOCKS" (
"LOCKNAME" VARCHAR2(256 BYTE) NOT NULL ,
"DATA" VARCHAR2(256 BYTE) NULL ,
"ENGINENAME" VARCHAR2(100 BYTE) NOT NULL ,
"NODEGROUPNAME" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_CLUSTER_LOCKS" IS 'This table contains cluster related modules for synchronization locks';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTER_LOCKS"."LOCKNAME" IS 'Cluster module to lock';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTER_LOCKS"."DATA" IS 'Data associated with module which helps in synchronization';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTER_LOCKS"."ENGINENAME" IS 'Unique name of the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTER_LOCKS"."NODEGROUPNAME" IS 'Unique id to represent group of nodes in a cluster as a sub-cluster. Each node belongs to only one sub-cluster group of a cluster.';

-- ----------------------------
-- Table structure for T_BPM_CLUSTERNODEINFO
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_CLUSTERNODEINFO";
CREATE TABLE "SERVICEDB"."T_BPM_CLUSTERNODEINFO" (
"IPADDRESS" VARCHAR2(100 BYTE) NOT NULL ,
"PORT" VARCHAR2(100 BYTE) NOT NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NOT NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"STATUS" VARCHAR2(10 BYTE) NULL ,
"LASTMODIFIEDTIME" DATE NULL ,
"ISTIMERENGINE" CHAR(1 BYTE) DEFAULT 'N'  NULL ,
"ISHISTORYENGINE" CHAR(1 BYTE) DEFAULT 'N'  NULL ,
"NODEGROUPNAME" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_CLUSTERNODEINFO" IS 'This table contains the information of nodes present in a cluster.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTERNODEINFO"."IPADDRESS" IS 'IP Address where the engine is started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTERNODEINFO"."PORT" IS 'Port where the engine is started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTERNODEINFO"."PROCESSENGINENAME" IS 'Unique name of the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTERNODEINFO"."CLUSTERNODEID" IS 'Node id of the cluster.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTERNODEINFO"."STATUS" IS 'Status of an engine. active or inactive.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTERNODEINFO"."LASTMODIFIEDTIME" IS 'Time when the engine got its last heart beat.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTERNODEINFO"."ISTIMERENGINE" IS 'Whether the engine is timer enabled';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTERNODEINFO"."ISHISTORYENGINE" IS 'Whether the engine is history enabled';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CLUSTERNODEINFO"."NODEGROUPNAME" IS 'Unique id to represent group of nodes in a cluster as a sub-cluster. Each node belongs to only one sub-cluster group of a cluster.';

-- ----------------------------
-- Table structure for T_BPM_COLLABORATIONDEFINITION
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION";
CREATE TABLE "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION" (
"COLLABORATIONID" VARCHAR2(100 BYTE) NOT NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"DEFINITION" CLOB NOT NULL ,
"DEPLOYTIME" DATE NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"COLLABORATIONDEFKEY" VARCHAR2(100 BYTE) NULL ,
"STATE" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION" IS 'This table contains details of Collaboration definitions and its blob content';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION"."COLLABORATIONID" IS 'Collaboration definition identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION"."VERSION" IS 'Collaboration definition version as mentioned in the file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION"."DEFINITION" IS 'The definition file content as a string';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION"."DEPLOYTIME" IS 'The time when the definition was deployed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION"."PROCESSENGINENAME" IS 'Unique name of the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION"."COLLABORATIONDEFKEY" IS 'The unique key for relation between collaboration definition and collaboration info tables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION"."STATE" IS 'Collaboration definition state which could be InActive(0), Active(1)';

-- ----------------------------
-- Table structure for T_BPM_COMMENT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_COMMENT";
CREATE TABLE "SERVICEDB"."T_BPM_COMMENT" (
"COMMENTID" VARCHAR2(100 BYTE) NOT NULL ,
"TASKID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NOT NULL ,
"COMMENTTEXT" VARCHAR2(2000 BYTE) NOT NULL ,
"CREATORID" VARCHAR2(100 BYTE) NULL ,
"CREATETIME" DATE NULL ,
"LASTMODIFIERID" VARCHAR2(100 BYTE) NULL ,
"LASTMODIFYTIME" DATE NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_COMMENT" IS 'For the process or task users may give comments. These are stored in this table.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."COMMENTID" IS 'Unique identifier for the comment generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."TASKID" IS 'The id of the task for which this comment was added.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."ACTIVITYDEFID" IS 'The id of the ActivityDefinition on which task is created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."PROCESSINSTANCEID" IS 'The id of the ProcessInstance on which task is created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."COMMENTTEXT" IS 'The text of the comment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."CREATORID" IS 'The id of the user who added the comment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."CREATETIME" IS 'The time the comment was added.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."LASTMODIFIERID" IS 'The id of the user who last modified the comment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."LASTMODIFYTIME" IS 'The time the comment was last modified.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_COMMENT"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_CUST_ACT_VARS
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_CUST_ACT_VARS";
CREATE TABLE "SERVICEDB"."T_BPM_CUST_ACT_VARS" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"CUSTOMVALUE" BLOB NULL ,
"PICREATETIME" DATE NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_CUST_ACT_VARS" IS 'This table contains information about the activity custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."CUSTOMVALUE" IS 'If the variable is custom, then its value will be marshalled and stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."ACTIVITYTRACEID" IS 'Id of the activity instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_ACT_VARS"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_CUST_ACT_VARS_BAK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_CUST_ACT_VARS_BAK";
CREATE TABLE "SERVICEDB"."T_BPM_CUST_ACT_VARS_BAK" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"CUSTOMVALUE" BLOB NULL ,
"PICREATETIME" DATE NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_BPM_CUST_VAR_SPLIT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_CUST_VAR_SPLIT";
CREATE TABLE "SERVICEDB"."T_BPM_CUST_VAR_SPLIT" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"ROW_ORDER" NUMBER NULL ,
"VAR_VALUE1" VARCHAR2(1024 BYTE) NULL ,
"VAR_VALUE2" VARCHAR2(1024 BYTE) NULL ,
"VAR_VALUE3" VARCHAR2(1024 BYTE) NULL ,
"VAR_VALUE4" VARCHAR2(1024 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_CUST_VAR_SPLIT" IS 'This table contains information about the active process instance custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."ROW_ORDER" IS 'Represents the row order when data spawns more than one row.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."VAR_VALUE1" IS 'Custom value is split into 4 parts and part1 is stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."VAR_VALUE2" IS 'Custom value is split into 4 parts and part2 is stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."VAR_VALUE3" IS 'Custom value is split into 4 parts and part3 is stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."VAR_VALUE4" IS 'Custom value is split into 4 parts and part4 is stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUST_VAR_SPLIT"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_CUSTOM_VARIABLES
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_CUSTOM_VARIABLES";
CREATE TABLE "SERVICEDB"."T_BPM_CUSTOM_VARIABLES" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"CUSTOMVALUE" BLOB NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_CUSTOM_VARIABLES" IS 'This table contains information about the active process instance custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOM_VARIABLES"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOM_VARIABLES"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOM_VARIABLES"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOM_VARIABLES"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOM_VARIABLES"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOM_VARIABLES"."CUSTOMVALUE" IS 'If the variable is custom, then its value will be marshalled and stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOM_VARIABLES"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOM_VARIABLES"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOM_VARIABLES"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_CUSTOM_VARIABLES_BAK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_CUSTOM_VARIABLES_BAK";
CREATE TABLE "SERVICEDB"."T_BPM_CUSTOM_VARIABLES_BAK" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"CUSTOMVALUE" BLOB NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_BPM_CUSTOMVARSTRACE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_CUSTOMVARSTRACE";
CREATE TABLE "SERVICEDB"."T_BPM_CUSTOMVARSTRACE" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"CUSTOMVALUE" BLOB NULL ,
"AFTEREXECUTE" CHAR(1 BYTE) DEFAULT 'N'  NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_CUSTOMVARSTRACE" IS 'This table contains snapshot of the custom variables during execution, which is used for tracing purpose.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the custom variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."ACTIVITYTRACEID" IS 'Represents the id of the activity trace to which this custom variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."NAME" IS 'Name of the custom variable, it maps to bpmn2:NAME of the custom variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."DATATYPE" IS 'Represents the data type of the custom variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."CUSTOMVALUE" IS 'The custom variable value will be marshalled and stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."AFTEREXECUTE" IS 'This column tells us if this snapshot was taken before executing the activity or after executing the activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."VARIABLENAME" IS 'Name of the custom variable, it maps to bpmn2:VARIABLENAME of the custom variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_CUSTOMVARSTRACE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_CUSTOMVARSTRACE_BAK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_CUSTOMVARSTRACE_BAK";
CREATE TABLE "SERVICEDB"."T_BPM_CUSTOMVARSTRACE_BAK" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"CUSTOMVALUE" BLOB NULL ,
"AFTEREXECUTE" CHAR(1 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_BPM_ENGINECONFIG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_ENGINECONFIG";
CREATE TABLE "SERVICEDB"."T_BPM_ENGINECONFIG" (
"CONFIGURATIONNAME" VARCHAR2(100 BYTE) NULL ,
"CONFIGURATIONVALUE" VARCHAR2(256 BYTE) NULL ,
"PROCESSENGINENAME" VARCHAR2(256 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_ENGINECONFIG" IS 'This table contains the information of all the configuration values read during engine startUp.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ENGINECONFIG"."CONFIGURATIONNAME" IS 'The name of the property as in *bpm*.properties.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ENGINECONFIG"."CONFIGURATIONVALUE" IS 'The value of the property as considered by engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ENGINECONFIG"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_ENGINECONFIG"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';

-- ----------------------------
-- Table structure for T_BPM_EVENT_CUST_DATA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_EVENT_CUST_DATA";
CREATE TABLE "SERVICEDB"."T_BPM_EVENT_CUST_DATA" (
"DATASETID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"VALUE" BLOB NULL ,
"EICREATETIME" DATE NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_EVENT_CUST_DATA" IS 'This table contains custom message data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_CUST_DATA"."DATASETID" IS 'Unique ID for data';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_CUST_DATA"."NAME" IS 'variable name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_CUST_DATA"."VALUE" IS 'variable value.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_CUST_DATA"."EICREATETIME" IS 'Time when the event instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_CUST_DATA"."DATATYPE" IS 'data type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_CUST_DATA"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_EVENT_PRIM_DATA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_EVENT_PRIM_DATA";
CREATE TABLE "SERVICEDB"."T_BPM_EVENT_PRIM_DATA" (
"DATASETID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"EICREATETIME" DATE NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_EVENT_PRIM_DATA" IS 'This table contains message data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_PRIM_DATA"."DATASETID" IS 'Unique ID for data';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_PRIM_DATA"."NAME" IS 'variable name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_PRIM_DATA"."VALUE" IS 'variable value.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_PRIM_DATA"."EICREATETIME" IS 'Time when the event instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_PRIM_DATA"."DATATYPE" IS 'data type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENT_PRIM_DATA"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_EVENTDEFINITION
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION";
CREATE TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" (
"EVENTDEFID" VARCHAR2(100 BYTE) NOT NULL ,
"EVENTDEFKEY" VARCHAR2(100 BYTE) NOT NULL ,
"ELEMENTID" VARCHAR2(100 BYTE) NOT NULL ,
"EVENTKEY" VARCHAR2(256 BYTE) NOT NULL ,
"HANDLER" VARCHAR2(100 BYTE) NOT NULL ,
"ELEMENTTYPE" NUMBER NOT NULL ,
"EVENTTYPE" NUMBER NOT NULL ,
"ELEMENTSTATUS" NUMBER NOT NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NOT NULL ,
"DEFINITION" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" IS 'This table contains definition related to events';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."EVENTDEFID" IS 'Event definition identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."EVENTDEFKEY" IS 'Event definition key.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."ELEMENTID" IS 'Element identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."EVENTKEY" IS 'Event key.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."HANDLER" IS 'Event Handler identifier';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."ELEMENTTYPE" IS 'Element Type.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."EVENTTYPE" IS 'Event Type.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."ELEMENTSTATUS" IS 'Element status.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."PROCESSENGINENAME" IS 'Process engine name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTDEFINITION"."DEFINITION" IS 'Event definition.';

-- ----------------------------
-- Table structure for T_BPM_EVENTINSTANCE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_EVENTINSTANCE";
CREATE TABLE "SERVICEDB"."T_BPM_EVENTINSTANCE" (
"SENDERPID" VARCHAR2(100 BYTE) NULL ,
"RECEIVERPID" VARCHAR2(100 BYTE) NULL ,
"CURRENTEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"SENDERELEMENTINSTID" VARCHAR2(100 BYTE) NULL ,
"RCVELEMENTINSTID" VARCHAR2(100 BYTE) NULL ,
"CREATETIME" DATE NULL ,
"EVENTSENDTIME" DATE NULL ,
"EVENTRECEIVEDTIME" DATE NULL ,
"DATASETID" VARCHAR2(100 BYTE) NULL ,
"ELEMENTID" VARCHAR2(100 BYTE) NULL ,
"CORELATIONKEY" VARCHAR2(512 BYTE) NULL ,
"EVENTKEY" VARCHAR2(256 BYTE) NULL ,
"EVENTDEFKEY" VARCHAR2(100 BYTE) NULL ,
"EVENTTYPE" NUMBER(1) NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"STATUS" NUMBER(1) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_EVENTINSTANCE" IS 'This table contains details of runtime event information';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."SENDERPID" IS 'Sender Process instance identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."RECEIVERPID" IS 'Receiver Process instance identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."CURRENTEXECUTIONID" IS 'Receiver current execution identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."SENDERELEMENTINSTID" IS 'Sender Process instance element identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."RCVELEMENTINSTID" IS 'Receiver Process instance element identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."CREATETIME" IS 'Time when the event instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."EVENTSENDTIME" IS 'Event message send time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."EVENTRECEIVEDTIME" IS 'Event message received time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."DATASETID" IS 'Unique ID for data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."ELEMENTID" IS 'Event element definition identifier';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."CORELATIONKEY" IS 'Event co-relation key';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."EVENTKEY" IS 'Event key between between sender and receiver.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."EVENTDEFKEY" IS 'Event definition key';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."EVENTTYPE" IS 'Event type';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."PROCESSENGINENAME" IS 'Process engine name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."STATUS" IS 'Event status';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EVENTINSTANCE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_EXCEPTIONINFO
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_EXCEPTIONINFO";
CREATE TABLE "SERVICEDB"."T_BPM_EXCEPTIONINFO" (
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"MAINPROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"EXCEPTIONTIME" DATE NULL ,
"PICREATETIME" DATE NULL ,
"ERRORDATA" VARCHAR2(2000 BYTE) NULL ,
"EXCEPTIONMESSAGE" VARCHAR2(2000 BYTE) NULL ,
"EXCEPTIONTYPE" VARCHAR2(200 BYTE) NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"EXCEPTIONTRACE" VARCHAR2(4000 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_EXCEPTIONINFO" IS 'For the process instance/branch execution/activity may occurred exception. These are stored in this table.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."ACTIVITYTRACEID" IS 'Unique instance identifier of the activity generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."BRANCHEXECUTIONID" IS 'Unique execution Id generated for branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."PROCESSINSTANCEID" IS 'The id of the ProcessInstance to which this exception info belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."MAINPROCESSINSTANCEID" IS 'process instance id of root execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."EXCEPTIONTIME" IS 'Time when the exception occured';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."ERRORDATA" IS 'It maintains the error data like last error occured, number of times corresponding error occured.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."EXCEPTIONMESSAGE" IS 'Exception message';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."EXCEPTIONTYPE" IS 'Fully qualified class name of exception';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."EXCEPTIONTRACE" IS 'Exception stack trace.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_EXCEPTIONINFO"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_ACTIVITYTRACE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE" (
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NOT NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"MAINPID" VARCHAR2(100 BYTE) NULL ,
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"ACTIVITYDEFNAME" VARCHAR2(256 BYTE) NULL ,
"UNIQUEACTIVITYDEFID" VARCHAR2(512 BYTE) NULL ,
"PREVACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"PARENTACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"ACTIVITYSTATE" NUMBER NULL ,
"EXECSEQUENCENUM" NUMBER NULL ,
"PREDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"PROCESSENGINENAME" VARCHAR2(256 BYTE) NULL ,
"ACTIVITYTYPE" NUMBER NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_01" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_02" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_03" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_04" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_05" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_06" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_07" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_08" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_09" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_10" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_11" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_12" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_13" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_14" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_15" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_16" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_17" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_18" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_19" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_20" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_21" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_22" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_23" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_24" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_25" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_26" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_27" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_28" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_29" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_30" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_31" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_32" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_33" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_34" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_35" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_36" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_37" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_38" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_39" VARCHAR2(100 BYTE) NULL ,
"EI_EXTN_40" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE" IS 'This table contains information about the activity, which is used for tracing purpose.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."ACTIVITYTRACEID" IS 'Unique instance identifier of the activity generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."BRANCHEXECUTIONID" IS 'Id of the execution to which this activity trace belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."PROCESSINSTANCEID" IS 'The id of the ProcessInstance to which this activity trace belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."MAINPID" IS 'The id of the Main Process Instance to which this activity trace belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."PROCESSDEFKEY" IS 'The unique key of the process definition to which this activity belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."ACTIVITYDEFID" IS 'This is unique in a given process definition. It maps to ID of the activity in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."ACTIVITYDEFNAME" IS 'This indicates the activity name. It maps to name of activity in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."UNIQUEACTIVITYDEFID" IS 'This is unique in a given process definition including call activity and subprocess.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."PREVACTIVITYINSTID" IS 'This indicates previous activity instance Id.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."PARENTACTIVITYINSTID" IS 'This indicates parent activity instance Id in case of callActivity and subprocess.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."STARTTIME" IS 'Time when the activity was started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."ENDTIME" IS 'Time when the activity was ended.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."ACTIVITYSTATE" IS 'The state of the activity. This will keep varying as the activity progresses.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."EXECSEQUENCENUM" IS 'A number assigned to the activity instance to capture its execution sequence.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."PREDACTIVITIES" IS 'Contains information about the predecessor actvities. Currently only the previous tasks informations are captured.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."ACTIVITYTYPE" IS 'type of the activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_BRANCHEXECUTION
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION" (
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NOT NULL ,
"PARENTEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PARENTACTDEFID" VARCHAR2(256 BYTE) NULL ,
"PARENTACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHSTATE" NUMBER NOT NULL ,
"PREVIOUSSTATE" NUMBER NOT NULL ,
"BRANCHTYPE" NUMBER NULL ,
"ELEMENTLOOPCOUNTER" NUMBER NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"CURACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYSTATE" NUMBER NULL ,
"CREATETIME" DATE NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"LASTUPDATETIME" DATE NULL ,
"PREDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"JOINEDELEMENTIDS" VARCHAR2(2000 BYTE) NULL ,
"JOINEDTRANSITIONS" VARCHAR2(2000 BYTE) NULL ,
"METADATA" NUMBER(20) NULL ,
"PICREATETIME" DATE NULL ,
"ISEXECUTING" NUMBER(1) NULL ,
"PREVACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"SRCTRANSITIONID" VARCHAR2(512 BYTE) NULL ,
"ASYNCELEMENTDEFID" VARCHAR2(100 BYTE) NULL ,
"ASYNCRETRYCOUNT" NUMBER DEFAULT -1  NULL ,
"ASYNCELEMENTINSTID" VARCHAR2(100 BYTE) NULL ,
"CURELMNTSTARTTIME" DATE NULL ,
"NODEGROUPNAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION" IS 'This table contains information about a branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."BRANCHEXECUTIONID" IS 'Unique execution Id generated for branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."PARENTEXECUTIONID" IS 'Execution Id of parent of a branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."PARENTACTDEFID" IS 'Activity definition Id  from where fork happened or parent activity definiton Id of sub-process.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."PARENTACTIVITYID" IS 'Activity Id  from where fork happened or parent activity Id of sub-process.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."PROCESSINSTANCEID" IS 'Unique execution id generated by the engine for the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."BRANCHSTATE" IS 'Current state of the branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."PREVIOUSSTATE" IS 'Previous state of the execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."BRANCHTYPE" IS 'Type of the execution, it will be one of the BRANCH(1), SUB(2)';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."ELEMENTLOOPCOUNTER" IS 'If the current element instance of this execution is of type standard loop or multi-instance loop, then the loop index will be stored, else 0.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."CURACTIVITYDEFID" IS 'This is unique in a given process definition. It maps to ID of the activity in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."CURACTIVITYID" IS 'It maps to ID of the activity in the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."CURACTIVITYSTATE" IS 'State of the current executing activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."CREATETIME" IS 'Time when the execution was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."STARTTIME" IS 'Time when the execution was started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."ENDTIME" IS 'Time when the execution completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."LASTUPDATETIME" IS 'Time when this record was last updated.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."PREDACTIVITIES" IS 'Contains information about the predecessor actvities. Currently only the previous tasks informations are captured.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."JOINEDELEMENTIDS" IS 'Contains information about the joined element definition ids for current join in this branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."JOINEDTRANSITIONS" IS 'Contains information about the joined transition definition ids for current join in this branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."METADATA" IS 'This represents the meta data about the process instance. Each bit in this column specifies boolean info as below:';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."ISEXECUTING" IS 'This represents the Activity executing on this execution instance:
0:This is to indicate no activity is executing.
1:This is to indicate activity is executing.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."PREVACTIVITYINSTID" IS 'This indicates previous activity instance Id.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."SRCTRANSITIONID" IS 'This represents transition id of the source which created this execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."ASYNCELEMENTDEFID" IS 'The id of the async continue element from which async continue is triggered.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."ASYNCRETRYCOUNT" IS 'The retry count of async continue flow from this execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."ASYNCELEMENTINSTID" IS 'The id of the element instance from which async continue is triggered.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."CURELMNTSTARTTIME" IS 'The start time of current element instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."NODEGROUPNAME" IS 'Unique id to represent group of nodes in a cluster as a sub-cluster. Each node belongs to only one sub-cluster group of a cluster.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_COMMENT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_COMMENT";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_COMMENT" (
"COMMENTID" VARCHAR2(100 BYTE) NOT NULL ,
"TASKID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NOT NULL ,
"COMMENTTEXT" VARCHAR2(2000 BYTE) NOT NULL ,
"CREATORID" VARCHAR2(100 BYTE) NULL ,
"CREATETIME" DATE NULL ,
"LASTMODIFIERID" VARCHAR2(100 BYTE) NULL ,
"LASTMODIFYTIME" DATE NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_COMMENT" IS 'For the process or task users may give comments. These are stored in this table.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."COMMENTID" IS 'Unique identifier for the comment generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."TASKID" IS 'The id of the task for which this comment was added.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."ACTIVITYDEFID" IS 'The id of the ActivityDefinition on which task is created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."PROCESSINSTANCEID" IS 'The id of the ProcessInstance on which task is created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."COMMENTTEXT" IS 'The text of the comment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."CREATORID" IS 'The id of the user who added the comment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."CREATETIME" IS 'The time the comment was added.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."LASTMODIFIERID" IS 'The id of the user who last modified the comment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."LASTMODIFYTIME" IS 'The time the comment was last modified.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_COMMENT"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_CUST_ACT_VARS
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"CUSTOMVALUE" BLOB NULL ,
"PICREATETIME" DATE NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS" IS 'This table contains information about the process instance custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."CUSTOMVALUE" IS 'If the variable is custom, then its value will be marshalled and stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."ACTIVITYTRACEID" IS 'Id of the activity instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_CUST_VAR_SPLIT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"ROW_ORDER" NUMBER NULL ,
"VAR_VALUE1" VARCHAR2(1024 BYTE) NULL ,
"VAR_VALUE2" VARCHAR2(1024 BYTE) NULL ,
"VAR_VALUE3" VARCHAR2(1024 BYTE) NULL ,
"VAR_VALUE4" VARCHAR2(1024 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT" IS 'This table contains information about the active process instance custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."ROW_ORDER" IS 'Represents the row order when data spawns more than one row.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."VAR_VALUE1" IS 'Custom value is split into 4 parts and part1 is stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."VAR_VALUE2" IS 'Custom value is split into 4 parts and part2 is stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."VAR_VALUE3" IS 'Custom value is split into 4 parts and part3 is stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."VAR_VALUE4" IS 'Custom value is split into 4 parts and part4 is stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_CUSTOM_VARIABLES
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"CUSTOMVALUE" BLOB NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES" IS 'This table contains information about the process instance custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES"."CUSTOMVALUE" IS 'If the variable is custom, then its value will be marshalled and stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_CUSTOMVARSTRACE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"CUSTOMVALUE" BLOB NULL ,
"AFTEREXECUTE" CHAR(1 BYTE) DEFAULT 'N'  NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE" IS 'This table contains snapshot of the custom variables during execution, which is used for tracing purpose.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the custom variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."ACTIVITYTRACEID" IS 'Represents the id of the activity trace to which this custom variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."NAME" IS 'Name of the custom variable, it maps to bpmn2:NAME of the custom variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."DATATYPE" IS 'Represents the data type of the custom variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."CUSTOMVALUE" IS 'The custom variable value will be marshalled and stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."AFTEREXECUTE" IS 'This column tells us if this snapshot was taken before executing the activity or after executing the activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."VARIABLENAME" IS 'Name of the custom variable, it maps to bpmn2:VARIABLENAME of the custom variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_EVENT_CUST_DATA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_EVENT_CUST_DATA";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_EVENT_CUST_DATA" (
"DATASETID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"VALUE" BLOB NULL ,
"EICREATETIME" DATE NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_EVENT_CUST_DATA" IS 'This table contains custom message data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_CUST_DATA"."DATASETID" IS 'Unique ID for a collaboration';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_CUST_DATA"."NAME" IS 'variable name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_CUST_DATA"."VALUE" IS 'variable value.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_CUST_DATA"."EICREATETIME" IS 'Time when the event instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_CUST_DATA"."DATATYPE" IS 'data type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_CUST_DATA"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_EVENT_PRIM_DATA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_EVENT_PRIM_DATA";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_EVENT_PRIM_DATA" (
"DATASETID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"EICREATETIME" DATE NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_EVENT_PRIM_DATA" IS 'This table contains message data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_PRIM_DATA"."DATASETID" IS 'Unique ID for a collaboration';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_PRIM_DATA"."NAME" IS 'variable name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_PRIM_DATA"."VALUE" IS 'variable value.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_PRIM_DATA"."EICREATETIME" IS 'Time when the event instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_PRIM_DATA"."DATATYPE" IS 'data type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENT_PRIM_DATA"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_EVENTINSTANCE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE" (
"SENDERPID" VARCHAR2(100 BYTE) NULL ,
"RECEIVERPID" VARCHAR2(100 BYTE) NULL ,
"CURRENTEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"SENDERELEMENTINSTID" VARCHAR2(100 BYTE) NULL ,
"RCVELEMENTINSTID" VARCHAR2(100 BYTE) NULL ,
"CREATETIME" DATE NULL ,
"EVENTSENDTIME" DATE NULL ,
"EVENTRECEIVEDTIME" DATE NULL ,
"DATASETID" VARCHAR2(100 BYTE) NULL ,
"ELEMENTID" VARCHAR2(100 BYTE) NULL ,
"CORELATIONKEY" VARCHAR2(512 BYTE) NULL ,
"EVENTKEY" VARCHAR2(256 BYTE) NULL ,
"EVENTDEFKEY" VARCHAR2(100 BYTE) NULL ,
"EVENTTYPE" NUMBER(1) NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"STATUS" NUMBER(1) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE" IS 'This table contains details of runtime event information related to history movement.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."SENDERPID" IS 'Sender Process instance identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."RECEIVERPID" IS 'Receiver Process instance identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."CURRENTEXECUTIONID" IS 'Receiver current execution identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."SENDERELEMENTINSTID" IS 'Sender Process instance element identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."RCVELEMENTINSTID" IS 'Receiver Process instance element identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."CREATETIME" IS 'Time when the event instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."EVENTSENDTIME" IS 'Event message send time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."EVENTRECEIVEDTIME" IS 'Event message received time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."DATASETID" IS 'Unique ID for data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."ELEMENTID" IS 'Event element definition identifier';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."CORELATIONKEY" IS 'Event co-relation key';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."EVENTKEY" IS 'Event key between between sender and receiver.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."EVENTDEFKEY" IS 'Event definition key';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."EVENTTYPE" IS 'Event type';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."PROCESSENGINENAME" IS 'Process engine name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."STATUS" IS 'Event status';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EVENTINSTANCE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_EXCEPTIONINFO
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO" (
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"MAINPROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"EXCEPTIONTIME" DATE NULL ,
"PICREATETIME" DATE NULL ,
"ERRORDATA" VARCHAR2(2000 BYTE) NULL ,
"EXCEPTIONMESSAGE" VARCHAR2(2000 BYTE) NULL ,
"EXCEPTIONTYPE" VARCHAR2(200 BYTE) NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"EXCEPTIONTRACE" VARCHAR2(4000 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO" IS 'For the process instance/branch execution/activity may occurred exception. These are stored in this table.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."ACTIVITYTRACEID" IS 'Unique instance identifier of the activity generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."BRANCHEXECUTIONID" IS 'Unique execution Id generated for branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."PROCESSINSTANCEID" IS 'The id of the ProcessInstance to which this exception info belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."MAINPROCESSINSTANCEID" IS 'process instance id of root execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."EXCEPTIONTIME" IS 'Time when the exception occured';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."ERRORDATA" IS 'It maintains the error data like last error occured, number of times corresponding error occured.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."EXCEPTIONMESSAGE" IS 'Exception message';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."EXCEPTIONTYPE" IS 'Fully qualified class name of exception';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."EXCEPTIONTRACE" IS 'Exception stack trace.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_HT_ASSIGNEE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE" (
"TASKID" VARCHAR2(100 BYTE) NULL ,
"ASSIGNEEID" VARCHAR2(100 BYTE) NULL ,
"ASSIGNEETYPE" NUMBER NULL ,
"WSHTROLETTYPE" NUMBER NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE" IS 'This table contains the details of an assignee.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE"."TASKID" IS 'Identifier of the task to which this assignee belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE"."ASSIGNEEID" IS 'May be UserID or GroupID.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE"."ASSIGNEETYPE" IS 'May be User, Group.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE"."WSHTROLETTYPE" IS 'Generic human role could be PotentialOwners(3), ExcludedOwners(4), BusinessAdministrators(5),  PotentialDelegatees(8).';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_HT_DEADLINE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_HT_DEADLINE";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_HT_DEADLINE" (
"DEADLINEID" VARCHAR2(100 BYTE) NOT NULL ,
"TASKID" VARCHAR2(100 BYTE) NULL ,
"DEADLINENAME" VARCHAR2(256 BYTE) NULL ,
"ORIGDEADLINETIME" DATE NULL ,
"DEADLINEDUETIME" DATE NULL ,
"DEADLINETYPE" NUMBER NULL ,
"TRIGGERED" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"PICREATETIME" DATE NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_HT_DEADLINE" IS 'This table contains the details about the deadlines associated with the tasks.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."DEADLINEID" IS 'Unique identifier for the deadline generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."TASKID" IS 'The task associated with this deadline.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."DEADLINENAME" IS 'Name of the deadline specified by the user at modelling time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."ORIGDEADLINETIME" IS 'The time according to the task definition when the deadline is supposed to trigger.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."DEADLINEDUETIME" IS 'The time when the deadline will actually trigger.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."DEADLINETYPE" IS 'Type of deadline can be Start(1) or Completion(2). Start deadline will fire if the task has not started by the specified time. Completion deadline will fire if the task has not finished by the specified time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."TRIGGERED" IS 'Indicates if the deadline was triggered as a result of the task not moving to the specified state within the deadline time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."ACTIVITYTRACEID" IS 'This is activity instanceID from activity trace table.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_DEADLINE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_HT_EVENTDATA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA" (
"EVENTLOGID" VARCHAR2(100 BYTE) NOT NULL ,
"EVENTDATA" BLOB NULL ,
"TASKID" VARCHAR2(100 BYTE) NOT NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA" IS 'Table to store User event log data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA"."EVENTLOGID" IS 'The task event log associated with this event data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA"."EVENTDATA" IS 'The data associated with this event.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA"."TASKID" IS 'Id of the task for which this event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_HT_EVENTLOG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG" (
"EVENTLOGID" VARCHAR2(100 BYTE) NOT NULL ,
"TASKID" VARCHAR2(100 BYTE) NOT NULL ,
"EVENTCREATETIME" DATE NULL ,
"EVENTCREATOR" VARCHAR2(100 BYTE) NULL ,
"EVENTTYPE" NUMBER NULL ,
"PREEVENTTASKOWNER" VARCHAR2(100 BYTE) NULL ,
"POSTEVENTTASKOWNER" VARCHAR2(100 BYTE) NULL ,
"TASKSTATE" NUMBER NULL ,
"HASDATA" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG" IS 'Table to store User event audit log.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."EVENTLOGID" IS 'Unique identifier generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."TASKID" IS 'Id of the task for which this event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."EVENTCREATETIME" IS 'The time the event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."EVENTCREATOR" IS 'The user who generated this event.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."EVENTTYPE" IS 'The event type which occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."PREEVENTTASKOWNER" IS 'The id of the task owner before the event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."POSTEVENTTASKOWNER" IS 'The id of the task owner after the event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."TASKSTATE" IS 'The state of the task when the event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."HASDATA" IS 'Set to [1] if the event has data associated with it.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_HT_TASK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_HT_TASK";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_HT_TASK" (
"TASKID" VARCHAR2(100 BYTE) NOT NULL ,
"TASKNAME" VARCHAR2(256 BYTE) NULL ,
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"EXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"PRIORITY" NUMBER NULL ,
"STATE" NUMBER NOT NULL ,
"PREVIOUSSTATE" NUMBER NULL ,
"PARENTTASKID" VARCHAR2(100 BYTE) NULL ,
"CREATETIME" DATE NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"SUSPENDEDTIME" DATE NULL ,
"OWNERID" VARCHAR2(100 BYTE) NULL ,
"COMPLETERID" VARCHAR2(100 BYTE) NULL ,
"CUSTOMSTATUS" VARCHAR2(256 BYTE) NULL ,
"CONCURRENCYLOCK" NUMBER DEFAULT 0  NULL ,
"TASKTYPE" NUMBER DEFAULT 0  NULL ,
"MARSHALLERID" NUMBER(4) NULL ,
"FORMURL" VARCHAR2(512 BYTE) NULL ,
"PRIMARYALARMID" VARCHAR2(100 BYTE) NULL ,
"ALARMDUETIME" DATE NULL ,
"PRIMARYDEADLINEID" VARCHAR2(100 BYTE) NULL ,
"DEADLINEDUETIME" DATE NULL ,
"SUBTASKS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"POTENTIALOWNERS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"EXCLUDEDOWNERS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"COMMENTS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"OUTPUT" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"FAULT" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"STARTDLTEXITS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"COMPLETEDLTEXISTS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"ESCALATED" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"EXECSEQUENCENUM" NUMBER NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_01" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_02" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_03" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_04" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_05" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_06" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_07" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_08" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_09" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_10" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_11" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_12" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_13" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_14" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_15" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_16" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_17" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_18" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_19" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_20" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_21" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_22" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_23" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_24" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_25" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_26" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_27" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_28" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_29" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_30" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_31" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_32" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_33" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_34" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_35" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_36" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_37" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_38" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_39" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_40" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_HT_TASK" IS 'This table contains the details of a human task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."TASKID" IS 'Unique identifier generated by the task engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."TASKNAME" IS 'Name of the task specified in the task definition at modeling time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."PROCESSDEFKEY" IS 'Unique key for the process definition generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."PROCESSINSTANCEID" IS 'The process instance to which this task belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."EXECUTIONID" IS 'The branch execution to which this task belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."ACTIVITYTRACEID" IS 'This is activity instanceID from activity trace table.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."ACTIVITYDEFID" IS 'Id of the user task specified in the task definition at modeling time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."PRIORITY" IS 'Priority of the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."STATE" IS 'State of the task as per WS-HumanTask1.1 states.(Like Ready, Reserved, Completed etc.).';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."PREVIOUSSTATE" IS 'The previous state of the task. Will be used when the task goes to suspended state.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."PARENTTASKID" IS 'Identifer of the parent task. The column will be set when the current task is a subTask.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."CREATETIME" IS 'Time when the task was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."STARTTIME" IS 'Time when the task was started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."ENDTIME" IS 'Time when the task completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."SUSPENDEDTIME" IS 'Time when the task was suspended.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."OWNERID" IS 'The Actual owner of the task. This will be set when a user has claimed the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."COMPLETERID" IS 'The complete owner of the task. This will be set when a user has completed the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."CUSTOMSTATUS" IS 'Business status data associated with the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."CONCURRENCYLOCK" IS 'For row-level exclusive locking to prevent concurrent access.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."TASKTYPE" IS 'Represents the type of the task such as normal task, manually created subtask.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."MARSHALLERID" IS 'The marshallerId used to marshal/unmarshal the application data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."FORMURL" IS 'The user form associated with the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."PRIMARYALARMID" IS 'Unique identifier of the alarm associated with this task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."ALARMDUETIME" IS 'The time when the alarm will fire if the task has not completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."PRIMARYDEADLINEID" IS 'Unique identifier of the deadline associated with this task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."DEADLINEDUETIME" IS 'The time when the deadline will fire if the task has not completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."SUBTASKS" IS 'If the task contains subtasks, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."POTENTIALOWNERS" IS 'If the task has potential owners, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."EXCLUDEDOWNERS" IS 'If the task has excluded owners, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."COMMENTS" IS 'If the task has comments, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."OUTPUT" IS 'If the task contains output data, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."FAULT" IS 'If the task contains fault data, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."STARTDLTEXITS" IS 'If the task contains start deadline the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."COMPLETEDLTEXISTS" IS 'If the task contains completion deadline the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."ESCALATED" IS 'If the task has been escalated at any time the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."EXECSEQUENCENUM" IS 'A number assigned to the activity instance to capture its execution sequence.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."PROCESSENGINENAME" IS 'Engine name given while creating the task engine,it is same with process engine name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_TASK"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_HT_VARIABLES
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_HT_VARIABLES";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_HT_VARIABLES" (
"TASKID" VARCHAR2(100 BYTE) NOT NULL ,
"APPDATA" BLOB NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_HT_VARIABLES" IS 'This table contains the user variables associated with the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_VARIABLES"."TASKID" IS 'Identifier of the task to which this variable data belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_VARIABLES"."APPDATA" IS 'Variable data associated with the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_VARIABLES"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_HT_VARIABLES"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_MOVE_STATISTICS
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS" (
"HISTORYID" VARCHAR2(100 BYTE) NOT NULL ,
"STATUS" VARCHAR2(100 BYTE) NOT NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"PROCESSCOUNT" NUMBER DEFAULT 0  NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NOT NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"TYPE" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS" IS 'This table contains the information related to history movement .';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS"."HISTORYID" IS 'Unique identifier for the history movement.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS"."STATUS" IS 'Status of the history movement. Supported Status states STARTED, COMPLETED, ROLLEDBACK.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS"."STARTTIME" IS 'History movement starts time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS"."ENDTIME" IS 'History movement end time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS"."PROCESSCOUNT" IS 'Number of processes moved.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS"."TYPE" IS 'Whether statistic data is for process archival or for process deletion.';

-- ----------------------------
-- Table structure for T_BPM_HIST_PRIM_ACT_VARS
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS" IS 'This table contains information about the process instance primitive variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."VALUE" IS 'If the variable is of standard JDK type its value will be stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."ACTIVITYTRACEID" IS 'Id of the activity instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_PRIMITIVE_VARIABLES
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES" IS 'This table contains information about the process instance primitive variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES"."VALUE" IS 'If the variable is of standard JDK type its value will be stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HIST_PROCESSINSTANCE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE" (
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NOT NULL ,
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NULL ,
"PROCESSSTATE" NUMBER NOT NULL ,
"PREVIOUSSTATE" NUMBER NOT NULL ,
"CONCURRENCYLOCK" NUMBER DEFAULT 0  NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"CURACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYSTATE" NUMBER NULL ,
"ELEMENTLOOPCOUNTER" NUMBER NULL ,
"MARSHALLERID" NUMBER(4) NULL ,
"CREATETIME" DATE NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"LASTUPDATETIME" DATE NULL ,
"CREATORID" VARCHAR2(100 BYTE) NULL ,
"ALARMDUETIME" DATE NULL ,
"DEADLINEDUETIME" DATE NULL ,
"ACTIVITYCOUNT" NUMBER NULL ,
"CURSEQUENCENUM" NUMBER NULL ,
"BUSINESSSTATUS" VARCHAR2(256 BYTE) NULL ,
"PITYPE" NUMBER NULL ,
"PARENTACTDEFID" VARCHAR2(256 BYTE) NULL ,
"PARENTEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PARENTACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"MAINPROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"TIMERSTATE" NUMBER NULL ,
"PREDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"SUSPENDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"SKIPPEDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"JOINEDELEMENTIDS" VARCHAR2(2000 BYTE) NULL ,
"JOINEDTRANSITIONS" VARCHAR2(2000 BYTE) NULL ,
"METADATA" NUMBER(20) NULL ,
"MAINPICREATETIME" DATE NULL ,
"ISEXECUTING" NUMBER(1) NULL ,
"PREVACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"ASYNCELEMENTDEFID" VARCHAR2(100 BYTE) NULL ,
"ASYNCRETRYCOUNT" NUMBER DEFAULT -1  NULL ,
"ASYNCELEMENTINSTID" VARCHAR2(100 BYTE) NULL ,
"CURELMNTSTARTTIME" DATE NULL ,
"PROCESSDEFID" VARCHAR2(100 BYTE) NULL ,
"PROCESSDEFNAME" VARCHAR2(256 BYTE) NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"NODEGROUPNAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL ,
"RUNNINGSTATUS" NUMBER(1) DEFAULT 0  NOT NULL ,
"PI_EXTN_01" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_02" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_03" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_04" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_05" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_06" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_07" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_08" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_09" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_10" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_11" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_12" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_13" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_14" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_15" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_16" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_17" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_18" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_19" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_20" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_21" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_22" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_23" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_24" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_25" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_26" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_27" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_28" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_29" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_30" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_31" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_32" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_33" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_34" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_35" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_36" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_37" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_38" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_39" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_40" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE" IS 'This table contains information about the process instances.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PROCESSINSTANCEID" IS 'Unique execution id generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PROCESSDEFKEY" IS 'The unique key of the process definition to which this execution belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PROCESSSTATE" IS 'Current state of the execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PREVIOUSSTATE" IS 'Previous state of the execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."CONCURRENCYLOCK" IS 'Field used to lock the execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."CURACTIVITYDEFID" IS 'This is unique in a given process definition. It maps to ID of the activity in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."CURACTIVITYID" IS 'It maps to ID of the activity in the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."CURACTIVITYSTATE" IS 'State of the current executing activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."ELEMENTLOOPCOUNTER" IS 'If the current element instance of this execution is of type standard loop or multi-instance loop, then the loop index will be stored, else 0.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."MARSHALLERID" IS 'MarshallerID to be used for marshalling/unmarshalling of custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."CREATETIME" IS 'Time when the execution was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."STARTTIME" IS 'Time when the execution was started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."ENDTIME" IS 'Time when the execution completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."LASTUPDATETIME" IS 'Time when this record was last updated.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."CREATORID" IS 'Id of the user who created the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."ALARMDUETIME" IS 'The due time when the alarm will be next fired.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."DEADLINEDUETIME" IS 'The due time when the deadline will be next fired.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."ACTIVITYCOUNT" IS 'Number of activities executed in the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."CURSEQUENCENUM" IS 'It tracks the current sequence number in the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."BUSINESSSTATUS" IS 'Specifies the business status related to process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PITYPE" IS 'Specifies the type of execution either 0 for root execution or 2 for sub process execution';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PARENTACTDEFID" IS 'Activity definition Id  from where fork happened or parent activity definiton Id of sub-process.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PARENTEXECUTIONID" IS 'Execution Id of parent of a branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PARENTACTIVITYID" IS 'Activity Id  from where fork happened or parent activity Id of sub-process.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."MAINPROCESSINSTANCEID" IS 'process instance id of root execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."TIMERSTATE" IS 'Indicates the status of the Process instance timer, if the Process instance is based on timer start up.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PREDACTIVITIES" IS 'Contains information about the predecessor actvities. Currently only the previous tasks informations are captured.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."SUSPENDACTIVITIES" IS 'The list of activities suspended in this process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."SKIPPEDACTIVITIES" IS 'The list of activities skipped in this process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."JOINEDELEMENTIDS" IS 'Contains information about the joined element definition ids for current join in this execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."JOINEDTRANSITIONS" IS 'Contains information about the joined transition definition ids for current join in this execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."METADATA" IS 'This represents the meta data about the process instance. Each bit in this column specifies boolean info as below:
0: This is to indicate whether this execution has the primitive variables.
1: This is to indicate whether this execution has the custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."MAINPICREATETIME" IS 'Time when the main process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."ISEXECUTING" IS 'This represents the Activity executing on this execution instance:
0:This is to indicate no activity is executing.
1:This is to indicate activity is executing.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PREVACTIVITYINSTID" IS 'This indicates previous activity instance Id.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."ASYNCELEMENTDEFID" IS 'The id of the async continue element from which async continue is triggered.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."ASYNCRETRYCOUNT" IS 'The retry count of async continue flow from this execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."ASYNCELEMENTINSTID" IS 'The id of the element instance from which async continue is triggered.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."CURELMNTSTARTTIME" IS 'The start time of current element instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PROCESSDEFID" IS 'Process definition identifier to which this process instance belongs to.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."PROCESSDEFNAME" IS 'Process definition name to which this process instance belongs to.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."VERSION" IS 'Process definition version to which this process instance belongs to.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."NODEGROUPNAME" IS 'Unique id to represent group of nodes in a cluster as a sub-cluster. Each node belongs to only one sub-cluster group of a cluster.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE"."RUNNINGSTATUS" IS 'This indicates PI is active or completed.';

-- ----------------------------
-- Table structure for T_BPM_HIST_VARIABLESTRACE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE";
CREATE TABLE "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"AFTEREXECUTE" CHAR(1 BYTE) DEFAULT 'N'  NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE" IS 'This table contains snapshot of the standard JDK variables during execution, which is used for tracing purpose.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the standard JDK variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."ACTIVITYTRACEID" IS 'Represents the id of the activity trace to which this standard JDK variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."NAME" IS 'Name of the standard JDK variable, it maps to bpmn2:NAME of the standard JDK variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."DATATYPE" IS 'Represents the data type of the standard JDK variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."VALUE" IS 'The standard JDK variable value will be stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."AFTEREXECUTE" IS 'This column tells us if this snapshot was taken before executing the activity or after executing the activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."VARIABLENAME" IS 'Name of the standard JDK variable, it maps to bpmn2:VARIABLENAME of the standard JDK variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HT_ASSIGNEE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_ASSIGNEE";
CREATE TABLE "SERVICEDB"."T_BPM_HT_ASSIGNEE" (
"TASKID" VARCHAR2(100 BYTE) NULL ,
"ASSIGNEEID" VARCHAR2(100 BYTE) NULL ,
"ASSIGNEETYPE" NUMBER NULL ,
"WSHTROLETTYPE" NUMBER NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_ASSIGNEE" IS 'This table contains the details of an assignee.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ASSIGNEE"."TASKID" IS 'Identifier of the task to which this assignee belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ASSIGNEE"."ASSIGNEEID" IS 'May be UserID or GroupID.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ASSIGNEE"."ASSIGNEETYPE" IS 'May be User, Group.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ASSIGNEE"."WSHTROLETTYPE" IS 'Generic human role could be PotentialOwners(3), ExcludedOwners(4), BusinessAdministrators(5),  PotentialDelegatees(8).';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ASSIGNEE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ASSIGNEE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HT_DEADLINE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_DEADLINE";
CREATE TABLE "SERVICEDB"."T_BPM_HT_DEADLINE" (
"DEADLINEID" VARCHAR2(100 BYTE) NOT NULL ,
"TASKID" VARCHAR2(100 BYTE) NULL ,
"DEADLINENAME" VARCHAR2(256 BYTE) NULL ,
"ORIGDEADLINETIME" DATE NULL ,
"DEADLINEDUETIME" DATE NULL ,
"DEADLINETYPE" NUMBER NULL ,
"TRIGGERED" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"PICREATETIME" DATE NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_DEADLINE" IS 'This table contains the details about the deadlines associated with the tasks.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."DEADLINEID" IS 'Unique identifier for the deadline generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."TASKID" IS 'The task associated with this deadline.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."DEADLINENAME" IS 'Name of the deadline specified by the user at modelling time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."ORIGDEADLINETIME" IS 'The time according to the task definition when the deadline is supposed to trigger.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."DEADLINEDUETIME" IS 'The time when the deadline will actually trigger.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."DEADLINETYPE" IS 'Type of deadline can be Start(1) or Completion(2). Start deadline will fire if the task has not started by the specified time. Completion deadline will fire if the task has not finished by the specified time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."TRIGGERED" IS 'Indicates if the deadline was triggered as a result of the task not moving to the specified state within the deadline time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."ACTIVITYTRACEID" IS 'This is activity instanceID from activity trace table.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_DEADLINE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HT_EVENTDATA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_EVENTDATA";
CREATE TABLE "SERVICEDB"."T_BPM_HT_EVENTDATA" (
"EVENTLOGID" VARCHAR2(100 BYTE) NOT NULL ,
"EVENTDATA" BLOB NULL ,
"TASKID" VARCHAR2(100 BYTE) NOT NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_EVENTDATA" IS 'Table to store User event log data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTDATA"."EVENTLOGID" IS 'The task event log associated with this event data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTDATA"."EVENTDATA" IS 'The data associated with this event.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTDATA"."TASKID" IS 'Id of the task for which this event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTDATA"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTDATA"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HT_EVENTLOG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_EVENTLOG";
CREATE TABLE "SERVICEDB"."T_BPM_HT_EVENTLOG" (
"EVENTLOGID" VARCHAR2(100 BYTE) NOT NULL ,
"TASKID" VARCHAR2(100 BYTE) NOT NULL ,
"EVENTCREATETIME" DATE NULL ,
"EVENTCREATOR" VARCHAR2(100 BYTE) NULL ,
"EVENTTYPE" NUMBER NULL ,
"PREEVENTTASKOWNER" VARCHAR2(100 BYTE) NULL ,
"POSTEVENTTASKOWNER" VARCHAR2(100 BYTE) NULL ,
"TASKSTATE" NUMBER NULL ,
"HASDATA" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_EVENTLOG" IS 'Table to store User event audit log.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."EVENTLOGID" IS 'Unique identifier generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."TASKID" IS 'Id of the task for which this event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."EVENTCREATETIME" IS 'The time the event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."EVENTCREATOR" IS 'The user who generated this event.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."EVENTTYPE" IS 'The event type which occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."PREEVENTTASKOWNER" IS 'The id of the task owner before the event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."POSTEVENTTASKOWNER" IS 'The id of the task owner after the event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."TASKSTATE" IS 'The state of the task when the event occurred.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."HASDATA" IS 'Set to [1] if the event has data associated with it.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_EVENTLOG"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HT_GROUP
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_GROUP";
CREATE TABLE "SERVICEDB"."T_BPM_HT_GROUP" (
"GROUPID" VARCHAR2(100 BYTE) NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_GROUP" IS 'This table contains the details about the groups.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_GROUP"."GROUPID" IS 'Unique group identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_GROUP"."NAME" IS 'Group name.';

-- ----------------------------
-- Table structure for T_BPM_HT_GROUPMEMBER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_GROUPMEMBER";
CREATE TABLE "SERVICEDB"."T_BPM_HT_GROUPMEMBER" (
"GROUPID" VARCHAR2(100 BYTE) NOT NULL ,
"USERID" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_GROUPMEMBER" IS 'This table contains the details about the group member mapping.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_GROUPMEMBER"."GROUPID" IS 'Unique group identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_GROUPMEMBER"."USERID" IS 'Unique user identifier of the user belonging to this group.';

-- ----------------------------
-- Table structure for T_BPM_HT_GROUPSUBGROUP
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP";
CREATE TABLE "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP" (
"GROUPID" VARCHAR2(100 BYTE) NOT NULL ,
"SUBGROUPID" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP" IS 'This table contains the details about the group and sub group mapping.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP"."GROUPID" IS 'Unique group identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP"."SUBGROUPID" IS 'Unique sub group belonging to this group.';

-- ----------------------------
-- Table structure for T_BPM_HT_HANDOVER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_HANDOVER";
CREATE TABLE "SERVICEDB"."T_BPM_HT_HANDOVER" (
"FROMUSERID" VARCHAR2(100 BYTE) NOT NULL ,
"TOUSERID" VARCHAR2(100 BYTE) NOT NULL ,
"PROCESSDEFID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYDEFID" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_HANDOVER" IS 'This table contains the details about the handovers made between users';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_HANDOVER"."FROMUSERID" IS 'The UserId from whom the tasks are to be handedOver';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_HANDOVER"."TOUSERID" IS 'The UserId to whom the tasks are handedOver';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_HANDOVER"."PROCESSDEFID" IS 'Unique Identifier for the process definition .Indicating the handover is applicable for this ProcessDefinition';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_HANDOVER"."ACTIVITYDEFID" IS 'Id of the user task specified in the task definition at modeling time.Indicating the handover is applicable for this activity';

-- ----------------------------
-- Table structure for T_BPM_HT_LOGICALGROUP
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUP";
CREATE TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUP" (
"LOGICALGROUPID" VARCHAR2(100 BYTE) NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUP" IS 'This table contains the details about the logical groups.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_LOGICALGROUP"."LOGICALGROUPID" IS 'Unique logical group identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_LOGICALGROUP"."NAME" IS 'Logical group name.';

-- ----------------------------
-- Table structure for T_BPM_HT_LOGICALGROUPMEMBER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER";
CREATE TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER" (
"LOGICALGROUPID" VARCHAR2(100 BYTE) NOT NULL ,
"USERID" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER" IS 'This table contains the details about the logical group member mapping.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER"."LOGICALGROUPID" IS 'Unique logical group identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER"."USERID" IS 'Unique user identifier of the user belonging to this logical group.';

-- ----------------------------
-- Table structure for T_BPM_HT_LOGICALGROUPROLE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE";
CREATE TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE" (
"LOGICALGROUPID" VARCHAR2(100 BYTE) NOT NULL ,
"ROLEID" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE" IS 'This table contains the details about the logical group and role mapping.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE"."LOGICALGROUPID" IS 'Unique logical group identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE"."ROLEID" IS 'Unique role identifier of role assigned to this logical group.';

-- ----------------------------
-- Table structure for T_BPM_HT_ROLE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_ROLE";
CREATE TABLE "SERVICEDB"."T_BPM_HT_ROLE" (
"ROLEID" VARCHAR2(100 BYTE) NOT NULL ,
"NAME" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_ROLE" IS 'This table contains the details about the roles.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ROLE"."ROLEID" IS 'Unique role identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ROLE"."NAME" IS 'Role name.';

-- ----------------------------
-- Table structure for T_BPM_HT_ROLEMEMBER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_ROLEMEMBER";
CREATE TABLE "SERVICEDB"."T_BPM_HT_ROLEMEMBER" (
"ROLEID" VARCHAR2(100 BYTE) NOT NULL ,
"USERID" VARCHAR2(100 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_ROLEMEMBER" IS 'This table contains the details about the role member mapping.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ROLEMEMBER"."ROLEID" IS 'Unique role identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_ROLEMEMBER"."USERID" IS 'Unique user identifier of the user belonging to this role.';

-- ----------------------------
-- Table structure for T_BPM_HT_TASK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_TASK";
CREATE TABLE "SERVICEDB"."T_BPM_HT_TASK" (
"TASKID" VARCHAR2(100 BYTE) NOT NULL ,
"TASKNAME" VARCHAR2(256 BYTE) NULL ,
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"EXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"PRIORITY" NUMBER NULL ,
"STATE" NUMBER NOT NULL ,
"PREVIOUSSTATE" NUMBER NULL ,
"PARENTTASKID" VARCHAR2(100 BYTE) NULL ,
"CREATETIME" DATE NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"SUSPENDEDTIME" DATE NULL ,
"OWNERID" VARCHAR2(100 BYTE) NULL ,
"COMPLETERID" VARCHAR2(100 BYTE) NULL ,
"CUSTOMSTATUS" VARCHAR2(256 BYTE) NULL ,
"CONCURRENCYLOCK" NUMBER DEFAULT 0  NULL ,
"TASKTYPE" NUMBER DEFAULT 0  NULL ,
"MARSHALLERID" NUMBER(4) NULL ,
"FORMURL" VARCHAR2(512 BYTE) NULL ,
"PRIMARYALARMID" VARCHAR2(100 BYTE) NULL ,
"ALARMDUETIME" DATE NULL ,
"PRIMARYDEADLINEID" VARCHAR2(100 BYTE) NULL ,
"DEADLINEDUETIME" DATE NULL ,
"SUBTASKS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"POTENTIALOWNERS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"EXCLUDEDOWNERS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"COMMENTS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"OUTPUT" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"FAULT" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"STARTDLTEXITS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"COMPLETEDLTEXISTS" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"ESCALATED" CHAR(1 BYTE) DEFAULT '0'  NULL ,
"EXECSEQUENCENUM" NUMBER NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_01" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_02" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_03" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_04" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_05" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_06" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_07" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_08" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_09" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_10" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_11" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_12" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_13" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_14" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_15" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_16" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_17" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_18" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_19" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_20" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_21" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_22" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_23" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_24" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_25" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_26" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_27" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_28" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_29" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_30" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_31" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_32" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_33" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_34" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_35" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_36" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_37" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_38" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_39" VARCHAR2(100 BYTE) NULL ,
"HT_EXTN_40" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_TASK" IS 'This table contains the details of a human task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."TASKID" IS 'Unique identifier generated by the task engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."TASKNAME" IS 'Name of the task specified in the task definition at modeling time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."PROCESSDEFKEY" IS 'Unique key for the process definition generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."PROCESSINSTANCEID" IS 'The process instance to which this task belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."EXECUTIONID" IS 'The branch execution to which this task belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."ACTIVITYTRACEID" IS 'This is activity instanceID from activity trace table.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."ACTIVITYDEFID" IS 'Id of the user task specified in the task definition at modeling time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."PRIORITY" IS 'Priority of the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."STATE" IS 'State of the task as per WS-HumanTask1.1 states.(Like Ready, Reserved, Completed etc.).';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."PREVIOUSSTATE" IS 'The previous state of the task. Will be used when the task goes to suspended state.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."PARENTTASKID" IS 'Identifer of the parent task. The column will be set when the current task is a subTask.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."CREATETIME" IS 'Time when the task was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."STARTTIME" IS 'Time when the task was started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."ENDTIME" IS 'Time when the task completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."SUSPENDEDTIME" IS 'Time when the task was suspended.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."OWNERID" IS 'The Actual owner of the task. This will be set when a user has claimed the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."COMPLETERID" IS 'The complete owner of the task. This will be set when a user has completed the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."CUSTOMSTATUS" IS 'Business status data associated with the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."CONCURRENCYLOCK" IS 'For row-level exclusive locking to prevent concurrent access.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."TASKTYPE" IS 'Represents the type of the task such as normal task, manually created subtask.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."MARSHALLERID" IS 'The marshallerId used to marshal/unmarshal the application data.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."FORMURL" IS 'The user form associated with the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."PRIMARYALARMID" IS 'Unique identifier of the alarm associated with this task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."ALARMDUETIME" IS 'The time when the alarm will fire if the task has not completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."PRIMARYDEADLINEID" IS 'Unique identifier of the deadline associated with this task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."DEADLINEDUETIME" IS 'The time when the deadline will fire if the task has not completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."SUBTASKS" IS 'If the task contains subtasks, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."POTENTIALOWNERS" IS 'If the task has potential owners, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."EXCLUDEDOWNERS" IS 'If the task has excluded owners, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."COMMENTS" IS 'If the task has comments, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."OUTPUT" IS 'If the task contains output data, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."FAULT" IS 'If the task contains fault data, the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."STARTDLTEXITS" IS 'If the task contains start deadline the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."COMPLETEDLTEXISTS" IS 'If the task contains completion deadline the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."ESCALATED" IS 'If the task has been escalated at any time the value of this column will be [1].';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."EXECSEQUENCENUM" IS 'A number assigned to the activity instance to capture its execution sequence.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."PROCESSENGINENAME" IS 'Engine name given while creating the task engine,it is same with process engine name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_TASK"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_HT_USER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_USER";
CREATE TABLE "SERVICEDB"."T_BPM_HT_USER" (
"USERID" VARCHAR2(100 BYTE) NOT NULL ,
"PASSWORD" VARCHAR2(32 BYTE) NULL ,
"NAME" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_USER" IS 'This table contains the details about the users.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_USER"."USERID" IS 'Unique user identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_USER"."PASSWORD" IS 'User encrypted password, Password should be saved as encrypted ';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_USER"."NAME" IS 'User name.';

-- ----------------------------
-- Table structure for T_BPM_HT_VARIABLES
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_HT_VARIABLES";
CREATE TABLE "SERVICEDB"."T_BPM_HT_VARIABLES" (
"TASKID" VARCHAR2(100 BYTE) NOT NULL ,
"APPDATA" BLOB NULL ,
"PICREATETIME" DATE NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_HT_VARIABLES" IS 'This table contains the user variables associated with the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_VARIABLES"."TASKID" IS 'Identifier of the task to which this variable data belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_VARIABLES"."APPDATA" IS 'Variable data associated with the task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_VARIABLES"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_HT_VARIABLES"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_JOB_QUEUE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_JOB_QUEUE";
CREATE TABLE "SERVICEDB"."T_BPM_JOB_QUEUE" (
"ID" VARCHAR2(100 BYTE) NOT NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"CREATETIME" NUMBER(20) NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"STATUS" NUMBER(4) NULL ,
"INFO" VARCHAR2(256 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"NODEGROUPNAME" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_JOB_QUEUE" IS 'This table contains the job details.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_JOB_QUEUE"."ID" IS 'Unique identifier generated by the engine to identify the job.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_JOB_QUEUE"."PROCESSINSTANCEID" IS 'Unique identifier of process instance to which the job belongs to.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_JOB_QUEUE"."CREATETIME" IS 'Time when the job is created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_JOB_QUEUE"."PROCESSENGINENAME" IS 'The name of the Process Engine to which job belongs to.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_JOB_QUEUE"."STATUS" IS 'It specifies the status of the job.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_JOB_QUEUE"."INFO" IS 'It stores the information which is required during job execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_JOB_QUEUE"."CLUSTERNODEID" IS 'It specifies the cluster node id.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_JOB_QUEUE"."NODEGROUPNAME" IS 'Unique id to represent group of nodes in a cluster as a sub-cluster. Each node belongs to only one sub-cluster group of a cluster.';

-- ----------------------------
-- Table structure for T_BPM_MARSHALLERS
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_MARSHALLERS";
CREATE TABLE "SERVICEDB"."T_BPM_MARSHALLERS" (
"MARSHALLERID" NUMBER(4) NOT NULL ,
"MARSHALLERCLASS" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_MARSHALLERS" IS 'This table contains marshallers ids and corresponding names';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_MARSHALLERS"."MARSHALLERID" IS 'Id for the marshaller used for mapping to process and task tables';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_MARSHALLERS"."MARSHALLERCLASS" IS 'Marshaller class name which is used to marshall custom variables';

-- ----------------------------
-- Table structure for T_BPM_PDBUSINESSDATAEXTN
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_PDBUSINESSDATAEXTN";
CREATE TABLE "SERVICEDB"."T_BPM_PDBUSINESSDATAEXTN" (
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NOT NULL ,
"BIZEXTPARAMNAME" VARCHAR2(100 BYTE) NOT NULL ,
"BIZEXTPARAMVALUE" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_PDBUSINESSDATAEXTN" IS 'This table contains the static business extension values.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PDBUSINESSDATAEXTN"."PROCESSDEFKEY" IS 'Points to a unique process definition in the process definition table.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PDBUSINESSDATAEXTN"."BIZEXTPARAMNAME" IS 'Extension parameter name. Alphanumeric characters and underscore are allowed in the name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PDBUSINESSDATAEXTN"."BIZEXTPARAMVALUE" IS 'Extension parameter value which can be in Chinese and may contain special characters.';

-- ----------------------------
-- Table structure for T_BPM_PRIM_ACT_VARS
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_PRIM_ACT_VARS";
CREATE TABLE "SERVICEDB"."T_BPM_PRIM_ACT_VARS" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_PRIM_ACT_VARS" IS 'This table contains information about the activity primitive variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."VALUE" IS 'If the variable is of standard JDK type its value will be stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."ACTIVITYTRACEID" IS 'Id of the activity instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIM_ACT_VARS"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_PRIMITIVE_VARIABLES
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES";
CREATE TABLE "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES" IS 'This table contains information about the active process instance primitive variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES"."NAME" IS 'Name of the variable, it maps to bpmn2:NAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES"."DATATYPE" IS 'Represents the class type of the variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES"."VALUE" IS 'If the variable is of standard JDK type its value will be stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES"."VARIABLENAME" IS 'Name of the variable, it maps to bpmn2:VARIABLENAME of the variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_BPM_PROCESSDEFINITION
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION";
CREATE TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION" (
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NOT NULL ,
"PROCESSDEFID" VARCHAR2(100 BYTE) NOT NULL ,
"PROCESSDEFNAME" VARCHAR2(256 BYTE) NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"DEFINITION" CLOB NOT NULL ,
"STATE" NUMBER NOT NULL ,
"DESCRIPTION" VARCHAR2(512 BYTE) NULL ,
"DEFLANGUAGE" NUMBER NULL ,
"DEPLOYTIME" DATE NULL ,
"VALIDFROMTIME" DATE NULL ,
"VALIDTILLTIME" DATE NULL ,
"BUSINESSTYPE" VARCHAR2(100 BYTE) NULL ,
"BUSINESSMODULE" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION" IS 'This table contains the details of all the process definition that are deployed to the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."PROCESSDEFKEY" IS 'Unique key generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."PROCESSDEFID" IS 'Process definition identifier. This identifier is used as input to start the process instances.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."PROCESSDEFNAME" IS 'Process definition name as mentioned in the file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."VERSION" IS 'Process definition version as mentioned in the file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."DEFINITION" IS 'The process definition file content as a string';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."STATE" IS 'Process definition state which could be InActive(0), Active(1)';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."DESCRIPTION" IS 'Description of the process definition given by the modeler.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."DEFLANGUAGE" IS 'Language of the process definition either BPMN2.0, BPEL or XPDL2.1';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."DEPLOYTIME" IS 'The time when the process definition was deployed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."VALIDFROMTIME" IS 'The time from when the process definition will be made active.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."VALIDTILLTIME" IS 'The time when the process definition will expire. Process instances cannot be created from expired process definitions.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."BUSINESSTYPE" IS 'The type of the business module to which this process definition belongs to.  It is an optional field.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSDEFINITION"."BUSINESSMODULE" IS 'The module in the business to which this process definition belongs to.  It is an optional field';

-- ----------------------------
-- Table structure for T_BPM_PROCESSDEFINITION_BAK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION_BAK";
CREATE TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION_BAK" (
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NULL ,
"PROCESSDEFID" VARCHAR2(100 BYTE) NOT NULL ,
"PROCESSDEFNAME" VARCHAR2(256 BYTE) NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"DEFINITION" CLOB NOT NULL ,
"STATE" NUMBER NOT NULL ,
"DESCRIPTION" VARCHAR2(512 BYTE) NULL ,
"DEFLANGUAGE" NUMBER NULL ,
"DEPLOYTIME" DATE NULL ,
"VALIDFROMTIME" DATE NULL ,
"VALIDTILLTIME" DATE NULL ,
"BUSINESSTYPE" VARCHAR2(100 BYTE) NULL ,
"BUSINESSMODULE" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_BPM_PROCESSINSTANCE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_PROCESSINSTANCE";
CREATE TABLE "SERVICEDB"."T_BPM_PROCESSINSTANCE" (
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NOT NULL ,
"PROCESSDEFKEY" VARCHAR2(100 BYTE) NULL ,
"PROCESSSTATE" NUMBER NOT NULL ,
"PREVIOUSSTATE" NUMBER NOT NULL ,
"CONCURRENCYLOCK" NUMBER DEFAULT 0  NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYDEFID" VARCHAR2(256 BYTE) NULL ,
"CURACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"CURACTIVITYSTATE" NUMBER NULL ,
"ELEMENTLOOPCOUNTER" NUMBER NULL ,
"MARSHALLERID" NUMBER(4) NULL ,
"CREATETIME" DATE NULL ,
"STARTTIME" DATE NULL ,
"ENDTIME" DATE NULL ,
"LASTUPDATETIME" DATE NULL ,
"CREATORID" VARCHAR2(100 BYTE) NULL ,
"ALARMDUETIME" DATE NULL ,
"DEADLINEDUETIME" DATE NULL ,
"ACTIVITYCOUNT" NUMBER NULL ,
"CURSEQUENCENUM" NUMBER NULL ,
"BUSINESSSTATUS" VARCHAR2(256 BYTE) NULL ,
"PITYPE" NUMBER NULL ,
"PARENTACTDEFID" VARCHAR2(256 BYTE) NULL ,
"PARENTEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PARENTACTIVITYID" VARCHAR2(100 BYTE) NULL ,
"MAINPROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"TIMERSTATE" NUMBER NULL ,
"PREDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"SUSPENDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"SKIPPEDACTIVITIES" VARCHAR2(2000 BYTE) NULL ,
"JOINEDELEMENTIDS" VARCHAR2(2000 BYTE) NULL ,
"JOINEDTRANSITIONS" VARCHAR2(2000 BYTE) NULL ,
"METADATA" NUMBER(20) NULL ,
"MAINPICREATETIME" DATE NULL ,
"ISEXECUTING" NUMBER(1) NULL ,
"PREVACTIVITYINSTID" VARCHAR2(100 BYTE) NULL ,
"ASYNCELEMENTDEFID" VARCHAR2(100 BYTE) NULL ,
"ASYNCRETRYCOUNT" NUMBER DEFAULT -1  NULL ,
"ASYNCELEMENTINSTID" VARCHAR2(100 BYTE) NULL ,
"CURELMNTSTARTTIME" DATE NULL ,
"PROCESSDEFID" VARCHAR2(100 BYTE) NULL ,
"PROCESSDEFNAME" VARCHAR2(256 BYTE) NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"NODEGROUPNAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL ,
"RUNNINGSTATUS" NUMBER(1) DEFAULT 0  NOT NULL ,
"PI_EXTN_01" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_02" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_03" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_04" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_05" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_06" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_07" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_08" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_09" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_10" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_11" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_12" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_13" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_14" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_15" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_16" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_17" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_18" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_19" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_20" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_21" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_22" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_23" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_24" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_25" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_26" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_27" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_28" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_29" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_30" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_31" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_32" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_33" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_34" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_35" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_36" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_37" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_38" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_39" VARCHAR2(100 BYTE) NULL ,
"PI_EXTN_40" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_PROCESSINSTANCE" IS 'This table contains information about the active process instances.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PROCESSINSTANCEID" IS 'Unique execution id generated by the engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PROCESSDEFKEY" IS 'The unique key of the process definition to which this execution belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PROCESSSTATE" IS 'Current state of the execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PREVIOUSSTATE" IS 'Previous state of the execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."CONCURRENCYLOCK" IS 'Field used to lock the execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PROCESSENGINENAME" IS 'Engine name given while creating the process engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."CURACTIVITYDEFID" IS 'This is unique in a given process definition. It maps to ID of the activity in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."CURACTIVITYID" IS 'It maps to ID of the activity in the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."CURACTIVITYSTATE" IS 'State of the current executing activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."ELEMENTLOOPCOUNTER" IS 'If the current element instance of this execution is of type standard loop or multi-instance loop, then the loop index will be stored, else 0.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."MARSHALLERID" IS 'MarshallerID to be used for marshalling/unmarshalling of custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."CREATETIME" IS 'Time when the execution was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."STARTTIME" IS 'Time when the execution was started.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."ENDTIME" IS 'Time when the execution completed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."LASTUPDATETIME" IS 'Time when this record was last updated.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."CREATORID" IS 'Id of the user who created the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."ALARMDUETIME" IS 'The due time when the alarm will be next fired.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."DEADLINEDUETIME" IS 'The due time when the deadline will be next fired.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."ACTIVITYCOUNT" IS 'Number of activities executed in the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."CURSEQUENCENUM" IS 'It tracks the current sequence number in the process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."BUSINESSSTATUS" IS 'Specifies the business status related to process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PITYPE" IS 'Specifies the type of execution either 0 for root execution or 2 for sub process execution';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PARENTACTDEFID" IS 'Activity definition Id  from where fork happened or parent activity definiton Id of sub-process.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PARENTEXECUTIONID" IS 'Execution Id of parent of a branch execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PARENTACTIVITYID" IS 'Activity Id  from where fork happened or parent activity Id of sub-process.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."MAINPROCESSINSTANCEID" IS 'process instance id of root execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."TIMERSTATE" IS 'Indicates the status of the Process instance timer, if the Process instance is based on timer start up.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PREDACTIVITIES" IS 'Contains information about the predecessor actvities. Currently only the previous tasks informations are captured.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."SUSPENDACTIVITIES" IS 'The list of activities suspended in this process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."SKIPPEDACTIVITIES" IS 'The list of activities skipped in this process instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."JOINEDELEMENTIDS" IS 'Contains information about the joined element definition ids for current join in this execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."JOINEDTRANSITIONS" IS 'Contains information about the joined transition definition ids for current join in this execution.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."METADATA" IS 'This represents the meta data about the process instance. Each bit in this column specifies boolean info as below:
0: This is to indicate whether this execution has the primitive variables.
1: This is to indicate whether this execution has the custom variables.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."MAINPICREATETIME" IS 'Time when the main process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."ISEXECUTING" IS 'This represents the Activity executing on this execution instance:
0:This is to indicate no activity is executing.
1:This is to indicate activity is executing.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PREVACTIVITYINSTID" IS 'This indicates previous activity instance Id.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."ASYNCELEMENTDEFID" IS 'The id of the async continue element from which async continue is triggered';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."ASYNCRETRYCOUNT" IS 'The retry count of async continue flow from this execution';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."ASYNCELEMENTINSTID" IS 'The id of the element instance from which async continue is triggered.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."CURELMNTSTARTTIME" IS 'The start time of current element instance.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PROCESSDEFID" IS 'Process definition identifier to which this process instance belongs to.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."PROCESSDEFNAME" IS 'Process definition name to which this process instance belongs to.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."VERSION" IS 'Process definition version to which this process instance belongs to.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."NODEGROUPNAME" IS 'Unique id to represent group of nodes in a cluster as a sub-cluster. Each node belongs to only one sub-cluster group of a cluster.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_PROCESSINSTANCE"."RUNNINGSTATUS" IS 'This indicates PI is active or completed.';

-- ----------------------------
-- Table structure for T_BPM_SEQ_GEN
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_SEQ_GEN";
CREATE TABLE "SERVICEDB"."T_BPM_SEQ_GEN" (
"SEQUENCEVALUE" NUMBER NOT NULL ,
"CONCURRENTLOCK" VARCHAR2(10 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_SEQ_GEN" IS 'This table contains sequence value for Id generations';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_SEQ_GEN"."SEQUENCEVALUE" IS 'current sequence value';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_SEQ_GEN"."CONCURRENTLOCK" IS 'is used to lock the row';

-- ----------------------------
-- Table structure for T_BPM_SYSTEM_CONFIG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_SYSTEM_CONFIG";
CREATE TABLE "SERVICEDB"."T_BPM_SYSTEM_CONFIG" (
"NAME" VARCHAR2(100 BYTE) NOT NULL ,
"VALUE" VARCHAR2(256 BYTE) NULL ,
"TYPE" VARCHAR2(100 BYTE) NULL ,
"CATEGORY" VARCHAR2(100 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(2000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_SYSTEM_CONFIG" IS 'This table contains system level configurations.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_SYSTEM_CONFIG"."NAME" IS 'Unique name of the system level configuration.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_SYSTEM_CONFIG"."VALUE" IS 'Value of the configuration.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_SYSTEM_CONFIG"."TYPE" IS 'Data type of the configuration.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_SYSTEM_CONFIG"."CATEGORY" IS 'Category of the configuration.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_SYSTEM_CONFIG"."DESCRIPTION" IS 'Configuration description.';

-- ----------------------------
-- Table structure for T_BPM_TIMER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_TIMER";
CREATE TABLE "SERVICEDB"."T_BPM_TIMER" (
"TASKID" VARCHAR2(100 BYTE) NOT NULL ,
"TIMERAPPID" VARCHAR2(256 BYTE) NOT NULL ,
"MODULENAME" VARCHAR2(256 BYTE) NOT NULL ,
"CALLBACKCLASSNAME" VARCHAR2(256 BYTE) NOT NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"STARTTIME" NUMBER(20) NULL ,
"PERIOD" NUMBER(20) NULL ,
"SCHEDULECOUNT" NUMBER(20) NULL ,
"REPEATCOUNT" NUMBER(20) NULL ,
"TIMEDOBJCLASSNAME" VARCHAR2(250 BYTE) NULL ,
"TIMEROPTIONTYPE" NUMBER(4) NULL ,
"ISFIRED" NUMBER(1) NULL ,
"WAITTIME" NUMBER(20) NULL ,
"PAUSEDTIME" NUMBER(20) NULL ,
"PROCESSENGINENAME" VARCHAR2(100 BYTE) NULL ,
"CLUSTERNODEID" VARCHAR2(100 BYTE) NULL ,
"STATUS" VARCHAR2(50 BYTE) NULL ,
"ISRELATIVE" NUMBER(1) NULL ,
"LASTREGISTEREDTIME" NUMBER(20) NULL ,
"DUETIME" NUMBER(20) NULL ,
"NODEGROUPNAME" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_TIMER" IS 'This table contains the timer task IDs,the details of all the timers that are registered and that are to be fired and the corresponding callback details.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."TASKID" IS 'Unique identifier generated by the engine to identify the timer task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."TIMERAPPID" IS 'The id supplied by the application which created this timer task.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."MODULENAME" IS 'The module to which this timer task belongs. The possible modules would be process engine and human task engine.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."CALLBACKCLASSNAME" IS 'The callback class which should be invoked when a timer event fires.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."PROCESSINSTANCEID" IS 'Unique identifier of process instance to which the Timer belongs to.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."STARTTIME" IS 'Start timer of the timer.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."PERIOD" IS 'Period in which timer will be fired.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."SCHEDULECOUNT" IS 'Number of times (repeats) timer should be executed during the period. -10 if it is infinite repeat.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."REPEATCOUNT" IS 'Number of times the timer is configured to repeat.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."TIMEDOBJCLASSNAME" IS 'Timed object class name.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."TIMEROPTIONTYPE" IS 'Timer option type.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."ISFIRED" IS 'Set to 1 when timer is fired first time.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."WAITTIME" IS 'Time at which timer is set to wait.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."PAUSEDTIME" IS 'Time at which timer is paused.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."PROCESSENGINENAME" IS 'The Name of the Process Engine which has acquired this timer task to fire.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."CLUSTERNODEID" IS 'Node id of the cluster in the clustered environment which has acquired this timer task to fire.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."STATUS" IS 'Status of the timer like Active, Acquired, Paused.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."ISRELATIVE" IS 'Set to 0 when timer is absolute type of timer.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."LASTREGISTEREDTIME" IS 'Time when the timer is last registered or resumed.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."DUETIME" IS 'Remaining time before the timer fires.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TIMER"."NODEGROUPNAME" IS 'Unique id to represent group of nodes in a cluster as a sub-cluster. Each node belongs to only one sub-cluster group of a cluster.';

-- ----------------------------
-- Table structure for T_BPM_TRACELINKMSGDATA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_TRACELINKMSGDATA";
CREATE TABLE "SERVICEDB"."T_BPM_TRACELINKMSGDATA" (
"MAINPROCESSINSTANCEID" VARCHAR2(100 BYTE) NOT NULL ,
"TRACEID" VARCHAR2(49 BYTE) NULL ,
"SEQNO" VARCHAR2(128 BYTE) NULL ,
"TRACEFLAG" NUMBER NULL ,
"CALLNUMBER" NUMBER NULL ,
"PLATFORMEXTENDINFO" VARCHAR2(512 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_TRACELINKMSGDATA" IS 'This table contains the trace link message details.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TRACELINKMSGDATA"."MAINPROCESSINSTANCEID" IS 'Main process instance identifier.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TRACELINKMSGDATA"."TRACEID" IS 'trace ID of trace link message.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TRACELINKMSGDATA"."SEQNO" IS 'sequence number of trace link message.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TRACELINKMSGDATA"."TRACEFLAG" IS 'trace flag of trace link message.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TRACELINKMSGDATA"."CALLNUMBER" IS 'call number of trace link message.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_TRACELINKMSGDATA"."PLATFORMEXTENDINFO" IS 'platform extended information of trace link message.';

-- ----------------------------
-- Table structure for T_BPM_VARIABLESTRACE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_BPM_VARIABLESTRACE";
CREATE TABLE "SERVICEDB"."T_BPM_VARIABLESTRACE" (
"VARIABLEID" VARCHAR2(100 BYTE) NULL ,
"BRANCHEXECUTIONID" VARCHAR2(100 BYTE) NULL ,
"PROCESSINSTANCEID" VARCHAR2(100 BYTE) NULL ,
"ACTIVITYTRACEID" VARCHAR2(100 BYTE) NULL ,
"NAME" VARCHAR2(256 BYTE) NULL ,
"DATATYPE" VARCHAR2(256 BYTE) NULL ,
"VALUE" VARCHAR2(2000 BYTE) NULL ,
"AFTEREXECUTE" CHAR(1 BYTE) DEFAULT 'N'  NULL ,
"PICREATETIME" DATE NULL ,
"VARIABLENAME" VARCHAR2(100 BYTE) NULL ,
"L2_PARTITION_KEY" VARCHAR2(100 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_BPM_VARIABLESTRACE" IS 'This table contains snapshot of the standard JDK variables during execution, which is used for tracing purpose.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."VARIABLEID" IS 'This is unique in a given process definition. It maps to ID of the standard JDK variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."BRANCHEXECUTIONID" IS 'Id of the branch execution to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."PROCESSINSTANCEID" IS 'Id of the process instance to which this variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."ACTIVITYTRACEID" IS 'Represents the id of the activity trace to which this standard JDK variable belongs.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."NAME" IS 'Name of the standard JDK variable, it maps to bpmn2:NAME of the standard JDK variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."DATATYPE" IS 'Represents the data type of the standard JDK variable.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."VALUE" IS 'The standard JDK variable value will be stored in this column.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."AFTEREXECUTE" IS 'This column tells us if this snapshot was taken before executing the activity or after executing the activity.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."PICREATETIME" IS 'Time when the process instance was created.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."VARIABLENAME" IS 'Name of the standard JDK variable, it maps to bpmn2:VARIABLENAME of the standard JDK variable in the process definition file.';
COMMENT ON COLUMN "SERVICEDB"."T_BPM_VARIABLESTRACE"."L2_PARTITION_KEY" IS 'This indicates value based on which second level partitions are created.';

-- ----------------------------
-- Table structure for T_HDI_CUSTOMVIEW
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_CUSTOMVIEW";
CREATE TABLE "SERVICEDB"."T_HDI_CUSTOMVIEW" (
"VIEWID" VARCHAR2(64 BYTE) NOT NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_CUSTOMVIEW" IS 'Customized view table';

-- ----------------------------
-- Table structure for T_HDI_DATAFIELD
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_DATAFIELD";
CREATE TABLE "SERVICEDB"."T_HDI_DATAFIELD" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"GROUPNAME" VARCHAR2(64 BYTE) NOT NULL ,
"FIELDNAME" VARCHAR2(64 BYTE) NOT NULL ,
"SEQUENCENO" NUMBER NULL ,
"NULLABLE" NUMBER NULL ,
"KEYFLAG" NUMBER NULL ,
"DATATYPE" NUMBER NULL ,
"LENGTH" NUMBER NULL ,
"SCALE" NUMBER NULL ,
"FORMAT" VARCHAR2(255 BYTE) NULL ,
"DEFAULTVALUE" VARCHAR2(255 BYTE) NULL ,
"VALUERANGE" VARCHAR2(255 BYTE) NULL ,
"SQLTYPE" NUMBER NULL ,
"OFFSETLENGTH" NUMBER NULL ,
"XPATH" VARCHAR2(255 BYTE) NULL ,
"DIRECTION" NUMBER NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"WIDTH" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_DATAFIELD" IS 'Two dimensional field configuration table';

-- ----------------------------
-- Table structure for T_HDI_DATAFLTMPLT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_DATAFLTMPLT";
CREATE TABLE "SERVICEDB"."T_HDI_DATAFLTMPLT" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"FLOWINFO" BLOB NULL ,
"STATUS" NUMBER NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_DATAFLTMPLT" IS 'Data flow template table';

-- ----------------------------
-- Table structure for T_HDI_DATATYPE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_DATATYPE";
CREATE TABLE "SERVICEDB"."T_HDI_DATATYPE" (
"DATATYPEID" VARCHAR2(64 BYTE) NOT NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(255 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"DATATYPE" NUMBER NULL ,
"DEFAULTVALUE" VARCHAR2(1000 BYTE) NULL ,
"LENGTH" NUMBER NULL ,
"FORMAT" VARCHAR2(255 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_FLATFILEDEF
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLATFILEDEF";
CREATE TABLE "SERVICEDB"."T_HDI_FLATFILEDEF" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"CODETYPE" VARCHAR2(16 BYTE) NULL ,
"FILETYPE" NUMBER NULL ,
"ISLOOP" NUMBER NULL ,
"LOOPINFO" VARCHAR2(1000 BYTE) NULL ,
"HEADROWCOUNT" NUMBER NULL ,
"TAILROWCOUNT" NUMBER NULL ,
"DELIMITER" VARCHAR2(12 BYTE) NULL ,
"NAMEVALUEDELIMITER" VARCHAR2(12 BYTE) NULL ,
"QUOTATIONMARKCHECK" NUMBER NULL ,
"SUPPORTWCHA" NUMBER NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"STATUS" NUMBER NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL ,
"ROWDELIMITER" VARCHAR2(12 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_FLATFILEDEF" IS 'XML file description table';

-- ----------------------------
-- Table structure for T_HDI_FLOWEXESTATE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLOWEXESTATE";
CREATE TABLE "SERVICEDB"."T_HDI_FLOWEXESTATE" (
"INSTID" VARCHAR2(64 BYTE) NOT NULL ,
"PACKAGEPATH" VARCHAR2(64 CHAR) NULL ,
"FLOWNAME" VARCHAR2(64 CHAR) NULL ,
"FLOWID" VARCHAR2(64 BYTE) NULL ,
"FLOWSTATUS" NUMBER NULL ,
"STARTDATATIME" VARCHAR2(20 BYTE) NULL ,
"ENDDATATIME" VARCHAR2(20 BYTE) NULL ,
"EXECTIME" TIMESTAMP(6)  NULL ,
"EFFECTIVE" NUMBER NULL ,
"PRIORITY" NUMBER(10) NULL ,
"CREATEDTIME" TIMESTAMP(6)  NULL ,
"STARTEDTIME" TIMESTAMP(6)  NULL ,
"STOPPEDTIME" TIMESTAMP(6)  NULL ,
"DEFAULTNODE" VARCHAR2(64 BYTE) NULL ,
"BLOCKDESC" CLOB NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"TASKCOUNT" NUMBER(10) NULL ,
"TYPE" NUMBER(10) NULL ,
"ISDEBUG" NUMBER(10) NULL ,
"RECURRINGTYPE" NUMBER(10) NULL ,
"RECURRINGLENGTH" NUMBER(10) NULL ,
"ADDTYPE" NUMBER NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"WARNFLAG" NUMBER(10) NULL ,
"SKIPFLAG" VARCHAR2(256 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CUSTINSTID" VARCHAR2(64 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_FLOWEXESTATE" IS 'flow execute state table';
COMMENT ON COLUMN "SERVICEDB"."T_HDI_FLOWEXESTATE"."FLOWSTATUS" IS 'NONE=-100; INACTIVE=0; CREATED=1; ACTIVE=2; WAIT=3; SUSPENDING=4; SUSPENDED=5; ABANDONING=6; ABANDONED=7; TERMINATING=8; TERMINATED=9; COMPLETED=10; ERROR=11; STARTING=12; FAILING=13; STOPPED=16; HDI_WAIT=101; HDI_READY=102; 	HDI_READY_TERMINATE=103; ';

-- ----------------------------
-- Table structure for T_HDI_FLOWINFO
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLOWINFO";
CREATE TABLE "SERVICEDB"."T_HDI_FLOWINFO" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"APPLYTIME" TIMESTAMP(6)  NOT NULL ,
"EXPIRETIME" TIMESTAMP(6)  NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"FLOWINFO" BLOB NULL ,
"FLOWTYPE" NUMBER NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"VIEWVERSION" VARCHAR2(32 BYTE) NULL ,
"STATUS" NUMBER NULL ,
"ISTRIGGERABLE" NUMBER NULL ,
"TASKNO" NUMBER NULL ,
"LOGLEVEL" VARCHAR2(10 BYTE) NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL ,
"COMPILED_DATA" BLOB NULL ,
"COMPILED_FLOW_DATA" CLOB NULL ,
"FLOW_DATA" CLOB NULL ,
"STAGESEXTEND" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_FLOWINFO" IS 'FlowOnline definition table';

-- ----------------------------
-- Table structure for T_HDI_FLOWINFO_BAK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLOWINFO_BAK";
CREATE TABLE "SERVICEDB"."T_HDI_FLOWINFO_BAK" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"APPLYTIME" TIMESTAMP(6)  NOT NULL ,
"EXPIRETIME" TIMESTAMP(6)  NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"FLOWINFO" BLOB NULL ,
"FLOWTYPE" NUMBER NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"VIEWVERSION" VARCHAR2(32 BYTE) NULL ,
"STATUS" NUMBER NULL ,
"ISTRIGGERABLE" NUMBER NULL ,
"TASKNO" NUMBER NULL ,
"LOGLEVEL" VARCHAR2(10 BYTE) NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL ,
"COMPILED_DATA" BLOB NULL ,
"COMPILED_FLOW_DATA" CLOB NULL ,
"FLOW_DATA" CLOB NULL ,
"STAGESEXTEND" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_FLOWINFO_BAK191204
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLOWINFO_BAK191204";
CREATE TABLE "SERVICEDB"."T_HDI_FLOWINFO_BAK191204" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"APPLYTIME" TIMESTAMP(6)  NOT NULL ,
"EXPIRETIME" TIMESTAMP(6)  NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"FLOWINFO" BLOB NULL ,
"FLOWTYPE" NUMBER NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"VIEWVERSION" VARCHAR2(32 BYTE) NULL ,
"STATUS" NUMBER NULL ,
"ISTRIGGERABLE" NUMBER NULL ,
"TASKNO" NUMBER NULL ,
"LOGLEVEL" VARCHAR2(10 BYTE) NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL ,
"COMPILED_DATA" BLOB NULL ,
"COMPILED_FLOW_DATA" CLOB NULL ,
"FLOW_DATA" CLOB NULL ,
"STAGESEXTEND" CLOB NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_FLOWINST
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLOWINST";
CREATE TABLE "SERVICEDB"."T_HDI_FLOWINST" (
"INSTID" VARCHAR2(64 BYTE) NOT NULL ,
"FLOWTYPE" NUMBER NULL ,
"FLOWID" VARCHAR2(64 BYTE) NULL ,
"EXECTIME" TIMESTAMP(6)  NULL ,
"STARTDATATIME" TIMESTAMP(6)  NULL ,
"ENDDATATIME" TIMESTAMP(6)  NULL ,
"EXECNODE" VARCHAR2(64 BYTE) NULL ,
"STATUS" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_FLOWINST" IS 'Control flow scheduling table';

-- ----------------------------
-- Table structure for T_HDI_FLOWONLINEINFO
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLOWONLINEINFO";
CREATE TABLE "SERVICEDB"."T_HDI_FLOWONLINEINFO" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"FLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"APPLYTIME" TIMESTAMP(6)  NOT NULL ,
"EXPIRETIME" TIMESTAMP(6)  NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"FLOWTYPE" NUMBER NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"STATUS" NUMBER NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"AUDITOPERID" VARCHAR2(64 BYTE) NULL ,
"AUDITDATE" TIMESTAMP(6)  NULL ,
"ONLINEOPERID" VARCHAR2(64 BYTE) NULL ,
"ONLINEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_FLOWPARAM
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLOWPARAM";
CREATE TABLE "SERVICEDB"."T_HDI_FLOWPARAM" (
"FLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"VERSION" VARCHAR2(32 BYTE) NOT NULL ,
"PARAMID" VARCHAR2(64 BYTE) NOT NULL ,
"APPLYTIME" TIMESTAMP(6)  NOT NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"EXPIRETIME" TIMESTAMP(6)  NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"DATATYPE" NUMBER NULL ,
"DEFAULTVALUE" VARCHAR2(1000 BYTE) NULL ,
"NULLABLE" NUMBER NULL ,
"LENGTH" NUMBER NULL ,
"SCALE" NUMBER NULL ,
"FORMAT" VARCHAR2(255 BYTE) NULL ,
"VALUERANGE" VARCHAR2(255 BYTE) NULL ,
"STATUS" NUMBER NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_FLOWPARAM" IS 'Flow parameter table';

-- ----------------------------
-- Table structure for T_HDI_FLOWRUNFLG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLOWRUNFLG";
CREATE TABLE "SERVICEDB"."T_HDI_FLOWRUNFLG" (
"FLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"RUNNINGFLAG" NUMBER NULL ,
"STARTTIME" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_FLOWRUNSTAT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FLOWRUNSTAT";
CREATE TABLE "SERVICEDB"."T_HDI_FLOWRUNSTAT" (
"RUNDATE" TIMESTAMP(6)  NOT NULL ,
"FLOWCOUNT" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_FLOWRUNSTAT" IS 'Control flow execution statistics table';

-- ----------------------------
-- Table structure for T_HDI_FUNCTION
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_FUNCTION";
CREATE TABLE "SERVICEDB"."T_HDI_FUNCTION" (
"NAME" VARCHAR2(64 BYTE) NOT NULL ,
"ISSYSFUN" NUMBER NULL ,
"ISVARFUN" NUMBER NULL ,
"ISSTATISTIC" NUMBER NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"PARAMS" VARCHAR2(255 BYTE) NULL ,
"STATUS" NUMBER NOT NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"JAR" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL ,
"RETURNTYPE" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_FUNCTION" IS 'Function definition table';
COMMENT ON COLUMN "SERVICEDB"."T_HDI_FUNCTION"."STATUS" IS 'Status: The value 0 indicates the editing state, and the value 2 indicates the released state.';

-- ----------------------------
-- Table structure for T_HDI_HOTFLOWINST
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_HOTFLOWINST";
CREATE TABLE "SERVICEDB"."T_HDI_HOTFLOWINST" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"FLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"INSTID" VARCHAR2(64 BYTE) NULL ,
"PACKAGEPATH" VARCHAR2(1000 BYTE) NULL ,
"FLOWNAME" VARCHAR2(64 CHAR) NULL ,
"FLOWSTATUS" NUMBER NULL ,
"STARTDATATIME" VARCHAR2(20 BYTE) NULL ,
"ENDDATATIME" VARCHAR2(20 BYTE) NULL ,
"EXECTIME" TIMESTAMP(6)  NULL ,
"CREATEDTIME" TIMESTAMP(6)  NULL ,
"STARTEDTIME" TIMESTAMP(6)  NULL ,
"STOPPEDTIME" TIMESTAMP(6)  NULL ,
"LASTEXECDURATION" NUMBER NULL ,
"DEFAULTNODE" VARCHAR2(64 BYTE) NULL ,
"BLOCKDESC" CLOB NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"PARAMS" VARCHAR2(4000 BYTE) NULL ,
"SPECIFIEDNODE" VARCHAR2(64 BYTE) NULL ,
"SCHEDULEFLAG" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_HOTFLOWINST" IS 'hot flow instance table';
COMMENT ON COLUMN "SERVICEDB"."T_HDI_HOTFLOWINST"."FLOWSTATUS" IS 'NONE=-100; INACTIVE=0; CREATED=1; ACTIVE=2; WAIT=3; SUSPENDING=4; SUSPENDED=5; ABANDONING=6; ABANDONED=7; TERMINATING=8; TERMINATED=9; COMPLETED=10; ERROR=11; STARTING=12; FAILING=13; STOPPED=16; HDI_WAIT=101; HDI_READY=102; 	HDI_READY_TERMINATE=103; ';

-- ----------------------------
-- Table structure for T_HDI_HOTFLOWINST_BAK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_HOTFLOWINST_BAK";
CREATE TABLE "SERVICEDB"."T_HDI_HOTFLOWINST_BAK" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"FLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"INSTID" VARCHAR2(64 BYTE) NULL ,
"PACKAGEPATH" VARCHAR2(1000 BYTE) NULL ,
"FLOWNAME" VARCHAR2(64 CHAR) NULL ,
"FLOWSTATUS" NUMBER NULL ,
"STARTDATATIME" VARCHAR2(20 BYTE) NULL ,
"ENDDATATIME" VARCHAR2(20 BYTE) NULL ,
"EXECTIME" TIMESTAMP(6)  NULL ,
"CREATEDTIME" TIMESTAMP(6)  NULL ,
"STARTEDTIME" TIMESTAMP(6)  NULL ,
"STOPPEDTIME" TIMESTAMP(6)  NULL ,
"LASTEXECDURATION" NUMBER NULL ,
"DEFAULTNODE" VARCHAR2(64 BYTE) NULL ,
"BLOCKDESC" CLOB NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"PARAMS" VARCHAR2(4000 BYTE) NULL ,
"SPECIFIEDNODE" VARCHAR2(64 BYTE) NULL ,
"SCHEDULEFLAG" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_INTERLOG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_INTERLOG";
CREATE TABLE "SERVICEDB"."T_HDI_INTERLOG" (
"LOGKEY" VARCHAR2(64 BYTE) NOT NULL ,
"SERIALNO" VARCHAR2(32 BYTE) NOT NULL ,
"CMDTYPE" VARCHAR2(64 BYTE) NOT NULL ,
"INTERFROM" VARCHAR2(32 BYTE) NOT NULL ,
"INTERMODE" NUMBER NULL ,
"PROCESSTAG" NUMBER NOT NULL ,
"ERRORCODE" NUMBER NULL ,
"ERRORMESSAGE" VARCHAR2(255 BYTE) NULL ,
"RETRYTIMES" NUMBER NULL ,
"USERNAME" VARCHAR2(127 BYTE) NULL ,
"REMOTEADDRESS" VARCHAR2(23 BYTE) NOT NULL ,
"BEGINDATE" TIMESTAMP(6)  NULL ,
"ENDDATE" TIMESTAMP(6)  NULL ,
"CONTENT" VARCHAR2(511 BYTE) NULL ,
"REMARK" VARCHAR2(255 BYTE) NULL ,
"BE_ID" VARCHAR2(255 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_MASTER_NODE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_MASTER_NODE";
CREATE TABLE "SERVICEDB"."T_HDI_MASTER_NODE" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"VERSION" VARCHAR2(64 BYTE) NOT NULL ,
"NODECODE" VARCHAR2(128 BYTE) NULL ,
"HOST" VARCHAR2(64 BYTE) NULL ,
"PORT" VARCHAR2(8 BYTE) NULL ,
"LSTUPDTIME" TIMESTAMP(6)  NULL ,
"LSTSWITCHTIME" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_METARIGHT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_METARIGHT";
CREATE TABLE "SERVICEDB"."T_HDI_METARIGHT" (
"METARIGHTID" VARCHAR2(255 BYTE) NOT NULL ,
"PACKAGEID" VARCHAR2(255 BYTE) NOT NULL ,
"ROLEID" VARCHAR2(255 BYTE) NULL ,
"PACKAGEPATH" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_MR_RIGHT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_MR_RIGHT";
CREATE TABLE "SERVICEDB"."T_HDI_MR_RIGHT" (
"METARIGHTID" VARCHAR2(255 BYTE) NOT NULL ,
"ID" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_MRRIGHT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_MRRIGHT";
CREATE TABLE "SERVICEDB"."T_HDI_MRRIGHT" (
"METARIGHTID" VARCHAR2(64 BYTE) NOT NULL ,
"ID" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_MSGINFO
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_MSGINFO";
CREATE TABLE "SERVICEDB"."T_HDI_MSGINFO" (
"ID" VARCHAR2(32 BYTE) NOT NULL ,
"CREATEDTIME" TIMESTAMP(6)  NULL ,
"OBJECTID" VARCHAR2(255 BYTE) NULL ,
"OBJECTNAME" VARCHAR2(255 BYTE) NULL ,
"OBJECTFULLNAME" VARCHAR2(1000 BYTE) NULL ,
"OBJECTFULLPATHID" VARCHAR2(1000 BYTE) NULL ,
"OBJECTTYPE" NUMBER NULL ,
"CONTENT" VARCHAR2(2048 BYTE) NULL ,
"LINKSTRING" VARCHAR2(255 BYTE) NULL ,
"ACK" NUMBER(1) NULL ,
"ACKUSER" VARCHAR2(255 BYTE) NULL ,
"ACKTIME" TIMESTAMP(6)  NULL ,
"ACKDESC" VARCHAR2(2048 BYTE) NULL ,
"TYPE" NUMBER NULL ,
"SUBOBJID" VARCHAR2(255 BYTE) NULL ,
"SUBOBJNAME" VARCHAR2(1000 BYTE) NULL ,
"SUBOBJTYPE" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_MSGINFO" IS 'Message record table';

-- ----------------------------
-- Table structure for T_HDI_MSGTASKREL
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_MSGTASKREL";
CREATE TABLE "SERVICEDB"."T_HDI_MSGTASKREL" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"MSGCONFIGID" VARCHAR2(64 BYTE) NULL ,
"FLOWID" VARCHAR2(64 BYTE) NULL ,
"TASKID" VARCHAR2(64 BYTE) NULL ,
"TASKTYPE" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_MSGTASKREL" IS 'Table of relationships between task message parameters and tasks';

-- ----------------------------
-- Table structure for T_HDI_NODE_MANAGER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_NODE_MANAGER";
CREATE TABLE "SERVICEDB"."T_HDI_NODE_MANAGER" (
"LOCK_ID" VARCHAR2(8 BYTE) NOT NULL ,
"STATUS" VARCHAR2(1 BYTE) NULL ,
"HEART_BEAT_TIME" TIMESTAMP(6)  NULL ,
"MANAGER_NODE" VARCHAR2(72 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_NOTES
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_NOTES";
CREATE TABLE "SERVICEDB"."T_HDI_NOTES" (
"FLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"NOTEID" VARCHAR2(64 BYTE) NOT NULL ,
"APPLYTIME" TIMESTAMP(6)  NULL ,
"NAME" VARCHAR2(1000 CHAR) NULL ,
"EXPIRETIME" TIMESTAMP(6)  NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"STATUS" NUMBER NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_NOTES" IS 'Comment definition table';

-- ----------------------------
-- Table structure for T_HDI_NOTIFYMSG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_NOTIFYMSG";
CREATE TABLE "SERVICEDB"."T_HDI_NOTIFYMSG" (
"NOTIFYINFOKEY_ID" VARCHAR2(32 BYTE) NOT NULL ,
"PLAN" VARCHAR2(64 CHAR) NULL ,
"TASK" VARCHAR2(64 CHAR) NULL ,
"TASKTYPE" VARCHAR2(32 BYTE) NULL ,
"TASKSTATUS" VARCHAR2(32 BYTE) NULL ,
"NOTIFY_TIME" TIMESTAMP(6)  NULL ,
"NOTIFYINFO" VARCHAR2(500 BYTE) NULL ,
"LINKMAN" VARCHAR2(500 BYTE) NULL ,
"LINKWAY" NUMBER NULL ,
"LINKSTRING" VARCHAR2(255 BYTE) NULL ,
"OBJECTID" VARCHAR2(32 BYTE) NULL ,
"OBJECTNAME" VARCHAR2(500 BYTE) NULL ,
"FULL_OBJECTNAME" VARCHAR2(1000 BYTE) NULL ,
"OBJECTTYPE" NUMBER NULL ,
"STARTDTIME" VARCHAR2(32 BYTE) NULL ,
"ENDDTIME" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_NOTIFYMSG" IS 'Notification record table';

-- ----------------------------
-- Table structure for T_HDI_OPERLOG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_OPERLOG";
CREATE TABLE "SERVICEDB"."T_HDI_OPERLOG" (
"LOGID" VARCHAR2(64 BYTE) NOT NULL ,
"LOGTIME" TIMESTAMP(6)  NULL ,
"MODULENAME" VARCHAR2(32 BYTE) NULL ,
"USERID" VARCHAR2(64 BYTE) NULL ,
"CLIENTIP" VARCHAR2(30 BYTE) NULL ,
"RESULT" VARCHAR2(250 BYTE) NULL ,
"OPERATIONNAME" VARCHAR2(64 BYTE) NULL ,
"OBJECTTYPE" VARCHAR2(64 BYTE) NULL ,
"APPENDINFO" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_OPERLOG" IS 'Operation log table';

-- ----------------------------
-- Table structure for T_HDI_OPERLOGBAK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_OPERLOGBAK";
CREATE TABLE "SERVICEDB"."T_HDI_OPERLOGBAK" (
"LOGID" VARCHAR2(32 BYTE) NOT NULL ,
"LOGTIME" TIMESTAMP(6)  NULL ,
"MODULENAME" VARCHAR2(32 BYTE) NULL ,
"USERID" VARCHAR2(64 BYTE) NULL ,
"CLIENTIP" VARCHAR2(30 BYTE) NULL ,
"RESULT" VARCHAR2(250 BYTE) NULL ,
"OPERATIONNAME" VARCHAR2(64 BYTE) NULL ,
"OBJECTTYPE" VARCHAR2(64 BYTE) NULL ,
"APPENDINFO" VARCHAR2(4000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_OPERLOGBAK" IS 'Operation log backup table';

-- ----------------------------
-- Table structure for T_HDI_PACKAGE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_PACKAGE";
CREATE TABLE "SERVICEDB"."T_HDI_PACKAGE" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"PARENTID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"TYPE" NUMBER NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_PACKAGE" IS 'ETL directory information table';
COMMENT ON COLUMN "SERVICEDB"."T_HDI_PACKAGE"."TYPE" IS 'Type: The value 0 indicates a task flow package, the value 1 indicates a data flow package, the value 2 indicates the FTP, the value 3 indicates a data source, the value 5 indicates a system parameter, the value 6 indicates a data flow template package, and the value 7 indicates a customized function. ';
COMMENT ON COLUMN "SERVICEDB"."T_HDI_PACKAGE"."BE_ID" IS 'Tenant ID';

-- ----------------------------
-- Table structure for T_HDI_PSDEF
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_PSDEF";
CREATE TABLE "SERVICEDB"."T_HDI_PSDEF" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"STATUS" NUMBER NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_PSDEF" IS 'Stored procedure configuration table';

-- ----------------------------
-- Table structure for T_HDI_RESDEF
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_RESDEF";
CREATE TABLE "SERVICEDB"."T_HDI_RESDEF" (
"RESOURCETYPE" VARCHAR2(32 BYTE) NOT NULL ,
"AMOUNT" NUMBER NULL ,
"DEFAULTVALUE" NUMBER NULL ,
"DESCRIPTION" VARCHAR2(1000 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_RESDEF" IS 'Resources usage config table';

-- ----------------------------
-- Table structure for T_HDI_RESMONCFG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_RESMONCFG";
CREATE TABLE "SERVICEDB"."T_HDI_RESMONCFG" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"SERVERNAME" VARCHAR2(64 BYTE) NULL ,
"CPULIMIT" NUMBER NULL ,
"CPUWARNFSTDU" NUMBER NULL ,
"CPUWARNFSTDUR" NUMBER NULL ,
"CPUWARNSCNDUR" NUMBER NULL ,
"CPUAUTINFM" NUMBER NULL ,
"CPUISPROTECT" NUMBER NULL ,
"CPUPROPLAN" VARCHAR2(500 BYTE) NULL ,
"IOLIMEN" NUMBER NULL ,
"IOWARNFSTDUR" NUMBER NULL ,
"IOWARNSCNDUR" NUMBER NULL ,
"IORESUMEDUR" NUMBER NULL ,
"IOAUTINFM" NUMBER NULL ,
"IOISPROTECT" NUMBER NULL ,
"IOPROPLAN" VARCHAR2(500 BYTE) NULL ,
"MMLIMEN" NUMBER NULL ,
"MMWARNFSTDUR" NUMBER NULL ,
"MMWARNSCNDUR" NUMBER NULL ,
"MMRESUMEDUR" NUMBER NULL ,
"MMAUTINFM" NUMBER NULL ,
"MMISPROTECT" NUMBER NULL ,
"MMPROPLAN" NUMBER NULL ,
"CREOPERID" VARCHAR2(500 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_RESMONCFG" IS 'System resource threshold configuration table';

-- ----------------------------
-- Table structure for T_HDI_RESMONSEND
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_RESMONSEND";
CREATE TABLE "SERVICEDB"."T_HDI_RESMONSEND" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"TYPE" NUMBER NULL ,
"MSGCFGID" VARCHAR2(32 BYTE) NULL ,
"RECEIVETYPE" NUMBER NULL ,
"ROLEID" VARCHAR2(32 BYTE) NULL ,
"USERID" VARCHAR2(32 BYTE) NULL ,
"CONTACTTYPE" VARCHAR2(32 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_RESMONSEND" IS 'Message receiver information table';

-- ----------------------------
-- Table structure for T_HDI_RESSNAPCFG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_RESSNAPCFG";
CREATE TABLE "SERVICEDB"."T_HDI_RESSNAPCFG" (
"SNAPID" VARCHAR2(64 BYTE) NOT NULL ,
"SERVERNAME" VARCHAR2(64 BYTE) NULL ,
"SERVERTYPE" NUMBER NULL ,
"RECORDCYCLE" NUMBER NULL ,
"STARTDATE" TIMESTAMP(6)  NULL ,
"STATE" NUMBER NULL ,
"COLLECTSERVER" VARCHAR2(64 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"ENDDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_RESSNAPCFG" IS 'Resource snapshot configuration table';

-- ----------------------------
-- Table structure for T_HDI_RESSNAPINFO
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_RESSNAPINFO";
CREATE TABLE "SERVICEDB"."T_HDI_RESSNAPINFO" (
"SNAPID" VARCHAR2(64 BYTE) NOT NULL ,
"SNAP_DATE" TIMESTAMP(6)  NOT NULL ,
"CPUVALUE" FLOAT(126) NULL ,
"MEMORYVALUE" FLOAT(126) NULL ,
"IOVALUE" FLOAT(126) NULL ,
"TASKCOUNT" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_RESSNAPINFO" IS 'Resource snapshot information table';

-- ----------------------------
-- Table structure for T_HDI_RESUSAGE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_RESUSAGE";
CREATE TABLE "SERVICEDB"."T_HDI_RESUSAGE" (
"RESOURCETYPE" VARCHAR2(32 BYTE) NOT NULL ,
"FLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"TASKID" VARCHAR2(64 BYTE) NOT NULL ,
"USAGE" NUMBER NULL ,
"TYPE" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_ROLE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_ROLE";
CREATE TABLE "SERVICEDB"."T_HDI_ROLE" (
"ROLEID" VARCHAR2(64 BYTE) NOT NULL ,
"ROLENAME" VARCHAR2(64 BYTE) NULL ,
"ROLEDESC" VARCHAR2(1000 CHAR) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATA" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_ROLE" IS 'ETL role table';
COMMENT ON COLUMN "SERVICEDB"."T_HDI_ROLE"."ROLEID" IS 'Role ID';
COMMENT ON COLUMN "SERVICEDB"."T_HDI_ROLE"."ROLENAME" IS 'Role name';
COMMENT ON COLUMN "SERVICEDB"."T_HDI_ROLE"."ROLEDESC" IS 'Role description';

-- ----------------------------
-- Table structure for T_HDI_ROLE_USER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_ROLE_USER";
CREATE TABLE "SERVICEDB"."T_HDI_ROLE_USER" (
"USERID" VARCHAR2(255 BYTE) NOT NULL ,
"ROLEID" VARCHAR2(255 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_ROLEGROUP
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_ROLEGROUP";
CREATE TABLE "SERVICEDB"."T_HDI_ROLEGROUP" (
"GROUPID" VARCHAR2(64 BYTE) NOT NULL ,
"NAME" VARCHAR2(64 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_ROLEGRPREL
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_ROLEGRPREL";
CREATE TABLE "SERVICEDB"."T_HDI_ROLEGRPREL" (
"GROUPID" VARCHAR2(64 BYTE) NULL ,
"ROLEID" VARCHAR2(64 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_ROLEGRPUSER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_ROLEGRPUSER";
CREATE TABLE "SERVICEDB"."T_HDI_ROLEGRPUSER" (
"USERID" VARCHAR2(64 BYTE) NULL ,
"ROLEGROUPID" VARCHAR2(64 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_ROLEMENUREL
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_ROLEMENUREL";
CREATE TABLE "SERVICEDB"."T_HDI_ROLEMENUREL" (
"METARIGHTID" VARCHAR2(64 BYTE) NOT NULL ,
"ROLEID" VARCHAR2(64 BYTE) NULL ,
"MENUID" VARCHAR2(64 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_ROLEPKGREL
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_ROLEPKGREL";
CREATE TABLE "SERVICEDB"."T_HDI_ROLEPKGREL" (
"METARIGHTID" VARCHAR2(64 BYTE) NOT NULL ,
"ROLEID" VARCHAR2(64 BYTE) NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"PACKAGETYPE" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_ROLEUSERREL
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_ROLEUSERREL";
CREATE TABLE "SERVICEDB"."T_HDI_ROLEUSERREL" (
"USERID" VARCHAR2(64 BYTE) NULL ,
"ROLEID" VARCHAR2(64 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_SCHEDULE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_SCHEDULE";
CREATE TABLE "SERVICEDB"."T_HDI_SCHEDULE" (
"CTRLFLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"SCHEDULETYPE" NUMBER NULL ,
"APPLYTIME" TIMESTAMP(6)  NOT NULL ,
"EXPIRETIME" TIMESTAMP(6)  NULL ,
"LASTTIME" TIMESTAMP(6)  NULL ,
"NEXTTIME" TIMESTAMP(6)  NULL ,
"DISABLEFLAG" NUMBER NULL ,
"SUSPENDSTARTFLAG" NUMBER NULL ,
"LASTDATATIME" VARCHAR2(20 BYTE) NULL ,
"NEXTDATATIME" VARCHAR2(20 BYTE) NULL ,
"RECURRINGTYPE" NUMBER NULL ,
"RECURRINGLENGTH" NUMBER NULL ,
"EXECNODE" VARCHAR2(64 BYTE) NULL ,
"EXECSTATUS" NUMBER NULL ,
"PRIORITY" NUMBER NULL ,
"PARALLELTYPE" NUMBER NULL ,
"AUTORESTOREDTIMES" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_SCHEDULE" IS 'Control flow scheduling table';
COMMENT ON COLUMN "SERVICEDB"."T_HDI_SCHEDULE"."EXECSTATUS" IS 'IDLE=0; RUN=1';

-- ----------------------------
-- Table structure for T_HDI_SPARKSUMIT_INFO
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_SPARKSUMIT_INFO";
CREATE TABLE "SERVICEDB"."T_HDI_SPARKSUMIT_INFO" (
"PROCESSINSTANCEID" VARCHAR2(64 BYTE) NOT NULL ,
"PID" VARCHAR2(64 BYTE) NULL ,
"TIME" NUMBER(14) NOT NULL ,
"NODEID" VARCHAR2(64 BYTE) NOT NULL ,
"STATE" NUMBER NOT NULL ,
"YARNCLUSTERTIMESTAMP" NUMBER(14) NULL ,
"YARNID" NUMBER NULL ,
"HADOOPID" VARCHAR2(64 BYTE) NULL ,
"USERID" VARCHAR2(64 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_SR_ROLE_LINK
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_SR_ROLE_LINK";
CREATE TABLE "SERVICEDB"."T_HDI_SR_ROLE_LINK" (
"ROLEID" VARCHAR2(255 BYTE) NOT NULL ,
"ID" VARCHAR2(255 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_STREAM_AM_RECORD
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD";
CREATE TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" (
"ID" NUMBER NOT NULL ,
"CLUSTERNAME" VARCHAR2(100 BYTE) NOT NULL ,
"APPID" VARCHAR2(500 BYTE) NOT NULL ,
"CCHOST" VARCHAR2(50 BYTE) NOT NULL ,
"CCPORT" NUMBER NOT NULL ,
"OWNER" VARCHAR2(100 BYTE) NOT NULL ,
"EXPIRETIME" LONG NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" IS 'YARN_APPLICATION_MASTER_INFO';

-- ----------------------------
-- Table structure for T_HDI_STREAM_DATAFIELD
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_STREAM_DATAFIELD";
CREATE TABLE "SERVICEDB"."T_HDI_STREAM_DATAFIELD" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"FIELDID" VARCHAR2(64 BYTE) NULL ,
"ISINDEXFIELD" VARCHAR2(64 BYTE) NULL ,
"ISDISTRIBUTEKEY" VARCHAR2(64 BYTE) NULL ,
"GROUPNAME" VARCHAR2(64 BYTE) NOT NULL ,
"FIELDNAME" VARCHAR2(64 BYTE) NOT NULL ,
"SEQUENCENO" NUMBER NULL ,
"NULLABLE" NUMBER NULL ,
"KEYFLAG" NUMBER NULL ,
"DATATYPE" NUMBER NULL ,
"LENGTH" NUMBER NULL ,
"SCALE" NUMBER NULL ,
"FORMAT" VARCHAR2(255 BYTE) NULL ,
"DEFAULTVALUE" VARCHAR2(255 BYTE) NULL ,
"VALUERANGE" VARCHAR2(255 BYTE) NULL ,
"SQLTYPE" NUMBER NULL ,
"OFFSETLENGTH" NUMBER NULL ,
"XPATH" VARCHAR2(255 BYTE) NULL ,
"DIRECTION" NUMBER NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"EXP" VARCHAR2(1024 BYTE) NULL ,
"TIMESTAMP" VARCHAR2(64 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_STREAM_DATAFIELD" IS 'XDR数据段';

-- ----------------------------
-- Table structure for T_HDI_STREAM_MEMORY_DATAFIELD
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_STREAM_MEMORY_DATAFIELD";
CREATE TABLE "SERVICEDB"."T_HDI_STREAM_MEMORY_DATAFIELD" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"FIELDID" VARCHAR2(64 BYTE) NULL ,
"GROUPNAME" VARCHAR2(64 BYTE) NOT NULL ,
"FIELDNAME" VARCHAR2(64 BYTE) NOT NULL ,
"SEQUENCENO" NUMBER NULL ,
"NULLABLE" NUMBER NULL ,
"KEYFLAG" NUMBER NULL ,
"DATATYPE" NUMBER NULL ,
"LENGTH" NUMBER NULL ,
"SCALE" NUMBER NULL ,
"FORMAT" VARCHAR2(255 BYTE) NULL ,
"DEFAULTVALUE" VARCHAR2(255 BYTE) NULL ,
"VALUERANGE" VARCHAR2(255 BYTE) NULL ,
"SQLTYPE" NUMBER NULL ,
"OFFSETLENGTH" NUMBER NULL ,
"XPATH" VARCHAR2(255 BYTE) NULL ,
"DIRECTION" NUMBER NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_STREAM_MEMORY_DATAFIELD" IS '维表数据段';

-- ----------------------------
-- Table structure for T_HDI_STREAM_MEMORYTABLE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_STREAM_MEMORYTABLE";
CREATE TABLE "SERVICEDB"."T_HDI_STREAM_MEMORYTABLE" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"DISTRIBUTEDKEYS" VARCHAR2(1024 BYTE) NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"DBID" VARCHAR2(64 BYTE) NULL ,
"DBNAME" VARCHAR2(64 BYTE) NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL ,
"ISRELEASE" NUMBER(1) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_STREAM_MEMORYTABLE" IS '维表';

-- ----------------------------
-- Table structure for T_HDI_STREAM_XDRTABLE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_STREAM_XDRTABLE";
CREATE TABLE "SERVICEDB"."T_HDI_STREAM_XDRTABLE" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"DISTRIBUTEDKEYS" VARCHAR2(1024 BYTE) NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"DBID" VARCHAR2(64 BYTE) NULL ,
"DBNAME" VARCHAR2(64 BYTE) NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(64 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL ,
"ISDEBUG" NUMBER(1) NOT NULL ,
"ISRELEASE" NUMBER(1) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_STREAM_XDRTABLE" IS 'XDR表';

-- ----------------------------
-- Table structure for T_HDI_STREAMING_PUBLISHLOG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_STREAMING_PUBLISHLOG";
CREATE TABLE "SERVICEDB"."T_HDI_STREAMING_PUBLISHLOG" (
"LOGID" VARCHAR2(64 BYTE) NOT NULL ,
"PUBLISH_TIME" TIMESTAMP(6)  NOT NULL ,
"XDRID" VARCHAR2(64 BYTE) NOT NULL ,
"OPERID" VARCHAR2(64 BYTE) NULL ,
"OPERDATE" TIMESTAMP(6)  NULL ,
"PUBLISH_DATA" CLOB NOT NULL ,
"STATUS" NUMBER(1) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_SYSPARAM
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_SYSPARAM";
CREATE TABLE "SERVICEDB"."T_HDI_SYSPARAM" (
"NAME" VARCHAR2(64 BYTE) NOT NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"PARAVALUE" VARCHAR2(1024 BYTE) NULL ,
"STATUS" NUMBER NOT NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL ,
"PARAMETERTYPE" NUMBER DEFAULT 0  NULL ,
"CONTAINEXPFLAG" NUMBER DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_SYSPARAM" IS 'System parameter table';

-- ----------------------------
-- Table structure for T_HDI_TABLEDEF
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_TABLEDEF";
CREATE TABLE "SERVICEDB"."T_HDI_TABLEDEF" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"DBID" VARCHAR2(64 BYTE) NULL ,
"DBNAME" VARCHAR2(64 BYTE) NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_TABLEDEF" IS 'Two dimensional definition table';

-- ----------------------------
-- Table structure for T_HDI_TASKDEF
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_TASKDEF";
CREATE TABLE "SERVICEDB"."T_HDI_TASKDEF" (
"CTRLFLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"TASKID" VARCHAR2(64 BYTE) NOT NULL ,
"APPLYTIME" TIMESTAMP(6)  NOT NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"EXPIRETIME" TIMESTAMP(6)  NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"TYPE" NUMBER NULL ,
"ISDEPENDABLE" NUMBER NULL ,
"VERSION" VARCHAR2(32 BYTE) NULL ,
"STATUS" NUMBER NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"DATAFLOWID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_TASKDEF" IS 'Task definition table';

-- ----------------------------
-- Table structure for T_HDI_TASKEXEAVERTIME
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_TASKEXEAVERTIME";
CREATE TABLE "SERVICEDB"."T_HDI_TASKEXEAVERTIME" (
"PACKAGEID" VARCHAR2(64 BYTE) NOT NULL ,
"TASKID" VARCHAR2(64 BYTE) NOT NULL ,
"FLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"EXECTIMES" NUMBER(16) NULL ,
"EXECTIME" NUMBER(16) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_TASKEXEAVERTIME" IS 'Control flow scheduling table';

-- ----------------------------
-- Table structure for T_HDI_TASKEXESTATE
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_TASKEXESTATE";
CREATE TABLE "SERVICEDB"."T_HDI_TASKEXESTATE" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"PACKAGENAME" VARCHAR2(64 CHAR) NULL ,
"FLOWNAME" VARCHAR2(64 CHAR) NULL ,
"FLOWID" VARCHAR2(64 BYTE) NULL ,
"TASKNAME" VARCHAR2(64 CHAR) NULL ,
"TASKID" VARCHAR2(64 BYTE) NULL ,
"STATUS" NUMBER NULL ,
"STARTDATATIME" VARCHAR2(20 BYTE) NULL ,
"ENDDATATIME" VARCHAR2(20 BYTE) NULL ,
"EXECTIME" TIMESTAMP(6)  NULL ,
"EFFECTIVE" NUMBER NULL ,
"ISDEBUG" NUMBER NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Table structure for T_HDI_TASKMSGCFG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_TASKMSGCFG";
CREATE TABLE "SERVICEDB"."T_HDI_TASKMSGCFG" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"NAME" VARCHAR2(64 BYTE) NULL ,
"CONFIGTYPE" NUMBER NULL ,
"TASKTYPE" NUMBER NULL ,
"DESCPTION" VARCHAR2(1000 BYTE) NULL ,
"EXPRESSION" VARCHAR2(500 BYTE) NULL ,
"EXPRESSIONMSG" VARCHAR2(500 BYTE) NULL ,
"SUCCESSMSG" VARCHAR2(500 BYTE) NULL ,
"SUCCESSMSGTYPE" VARCHAR2(50 BYTE) NULL ,
"ERRORMSG" VARCHAR2(500 BYTE) NULL ,
"ERRORMSGTYPE" VARCHAR2(50 BYTE) NULL ,
"WARNMSG" VARCHAR2(500 BYTE) NULL ,
"WARNMSGTYPE" VARCHAR2(50 BYTE) NULL ,
"TIMEOUTLENMSG" VARCHAR2(500 BYTE) NULL ,
"TIMEOUTLENGTH" NUMBER NULL ,
"TIMEOUTPNTMSG" VARCHAR2(500 BYTE) NULL ,
"TIMEOUTPNTDATE" VARCHAR2(500 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"SENDNMSFLAG" NUMBER DEFAULT 0  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_TASKMSGCFG" IS 'Task message parameter configuration table';

-- ----------------------------
-- Table structure for T_HDI_TASKRELAT
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_TASKRELAT";
CREATE TABLE "SERVICEDB"."T_HDI_TASKRELAT" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"APPLYTIME" TIMESTAMP(6)  NOT NULL ,
"EXPIRETIME" TIMESTAMP(6)  NULL ,
"SOURCECTRLFLOWID" VARCHAR2(64 BYTE) NULL ,
"SOURCETASKID" VARCHAR2(64 BYTE) NULL ,
"TARGETCTRLFLOWID" VARCHAR2(64 BYTE) NULL ,
"TARGETTASKID" VARCHAR2(64 BYTE) NULL ,
"TYPE" NUMBER NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"TENANT_ID" VARCHAR2(256 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_TASKRELAT" IS 'Task relationship table';

-- ----------------------------
-- Table structure for T_HDI_TMPLTPARAM
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_TMPLTPARAM";
CREATE TABLE "SERVICEDB"."T_HDI_TMPLTPARAM" (
"TMPLTID" VARCHAR2(64 BYTE) NOT NULL ,
"PARAMID" VARCHAR2(64 BYTE) NOT NULL ,
"NAME" VARCHAR2(64 CHAR) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"DATATYPE" NUMBER NULL ,
"DEFAULTVALUE" VARCHAR2(255 BYTE) NULL ,
"NULLABLE" NUMBER NULL ,
"LENGTH" NUMBER NULL ,
"SCALE" NUMBER NULL ,
"FORMAT" VARCHAR2(255 BYTE) NULL ,
"VALUERANGE" VARCHAR2(255 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_TMPLTPARAM" IS 'Data flow template parameter table';

-- ----------------------------
-- Table structure for T_HDI_VCU_CONFIG
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_CONFIG";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" (
"NOTIYRECORDCOUNT" NUMBER NOT NULL ,
"PERIODCOUNT" NUMBER NOT NULL ,
"PERIODMINUTE" NUMBER NOT NULL ,
"DELAYSECOND" NUMBER NOT NULL ,
"EXPIREDSECOND" NUMBER NOT NULL ,
"XDRTHREADCOUNT" NUMBER NOT NULL ,
"SCANSECOND" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" IS 'Streaming BDI全局配置信息';

-- ----------------------------
-- Table structure for T_HDI_VCU_DA_INFO
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_DA_INFO";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_DA_INFO" (
"DA_ID" NUMBER NOT NULL ,
"DA_IP" VARCHAR2(256 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_DA_INFO" IS 'DA分布信息';

-- ----------------------------
-- Table structure for T_HDI_VCU_MASTER
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_MASTER";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_MASTER" (
"HOST_IP" VARCHAR2(64 BYTE) NOT NULL ,
"EXPIREDATE" TIMESTAMP(6)  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_MASTER" IS 'MASTER VCU状态监控表';

-- ----------------------------
-- Table structure for T_HDI_VCU_METADATA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_METADATA";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_METADATA" (
"XDR_ID" NUMBER NOT NULL ,
"XDR_INFO" VARCHAR2(4000 CHAR) NOT NULL ,
"PUBLISH_TIME" TIMESTAMP(6)  NOT NULL ,
"EFFECT_TIME" TIMESTAMP(6)  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_METADATA" IS 'STREAMING发布的元数据信息';

-- ----------------------------
-- Table structure for T_HDI_VCU_NODES
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_NODES";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_NODES" (
"HOST_IP" VARCHAR2(64 BYTE) NOT NULL ,
"EXPIREDATE" TIMESTAMP(6)  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_NODES" IS 'VCU节点状态表';

-- ----------------------------
-- Table structure for T_HDI_VCU_SNAPSHOT_FAILEDDA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FAILEDDA";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FAILEDDA" (
"SNAPSHOT_ID" NUMBER(20) NOT NULL ,
"DA_ID" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FAILEDDA" IS '快照失效DA信息';

-- ----------------------------
-- Table structure for T_HDI_VCU_SNAPSHOT_FLOWS
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FLOWS";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FLOWS" (
"SNAPSHOT_ID" NUMBER(20) NOT NULL ,
"FLOW_ID" NUMBER NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FLOWS" IS '快照流程依赖信息';

-- ----------------------------
-- Table structure for T_HDI_VCU_SNAPSHOT_MDA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_MDA";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_MDA" (
"SNAPSHOT_ID" NUMBER(20) NOT NULL ,
"MDA_INFO" VARCHAR2(4000 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_MDA" IS '快照MDA信息';

-- ----------------------------
-- Table structure for T_HDI_VCU_SNAPSHOT_METADATA
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_METADATA";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_METADATA" (
"SNAPSHOT_ID" NUMBER(20) NOT NULL ,
"XDR_ID" NUMBER NOT NULL ,
"XDR_INFO" VARCHAR2(4000 CHAR) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_METADATA" IS '快照XDR元数据信息';

-- ----------------------------
-- Table structure for T_HDI_VCU_SNAPSHOT_NOTIFY
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_NOTIFY";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_NOTIFY" (
"SNAPSHOT_ID" NUMBER(20) NOT NULL ,
"HOST_IP" VARCHAR2(64 BYTE) NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_NOTIFY" IS '快照数据就绪通知信息';

-- ----------------------------
-- Table structure for T_HDI_VCU_SNAPSHOTS
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOTS";
CREATE TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOTS" (
"SNAPSHOT_ID" NUMBER(20) NOT NULL ,
"SNAPSHOT_TIME" TIMESTAMP(6)  NOT NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOTS" IS '快照信息表';

-- ----------------------------
-- Table structure for T_HDI_VIEWCTRLREL
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_VIEWCTRLREL";
CREATE TABLE "SERVICEDB"."T_HDI_VIEWCTRLREL" (
"VIEWID" VARCHAR2(64 BYTE) NOT NULL ,
"CTRLFLOWID" VARCHAR2(64 BYTE) NOT NULL ,
"BOUNDS" VARCHAR2(1000 BYTE) NULL ,
"HEIGHT" NUMBER NULL ,
"WIDTH" NUMBER NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;
COMMENT ON TABLE "SERVICEDB"."T_HDI_VIEWCTRLREL" IS 'Customized view control flow relationship table';

-- ----------------------------
-- Table structure for T_HDI_XMLFILEDEF
-- ----------------------------
DROP TABLE "SERVICEDB"."T_HDI_XMLFILEDEF";
CREATE TABLE "SERVICEDB"."T_HDI_XMLFILEDEF" (
"ID" VARCHAR2(64 BYTE) NOT NULL ,
"PACKAGEID" VARCHAR2(64 BYTE) NULL ,
"NAME" VARCHAR2(64 BYTE) NULL ,
"CODETYPE" VARCHAR2(16 BYTE) NULL ,
"DESCRIPTION" VARCHAR2(1000 CHAR) NULL ,
"STATUS" NUMBER NULL ,
"BE_ID" VARCHAR2(64 BYTE) NULL ,
"CREOPERID" VARCHAR2(64 BYTE) NULL ,
"CREDATE" TIMESTAMP(6)  NULL ,
"LASTUPDOPERID" VARCHAR2(64 BYTE) NULL ,
"LASTUPDDATE" TIMESTAMP(6)  NULL ,
"RELEASEOPERID" VARCHAR2(64 BYTE) NULL ,
"RELEASEDATE" TIMESTAMP(6)  NULL 
)
LOGGING
NOCOMPRESS
NOCACHE

;

-- ----------------------------
-- Procedure structure for APP_USER_ACCOUNT
-- ----------------------------
CREATE OR REPLACE procedure "SERVICEDB"."APP_USER_ACCOUNT"
(
    str_role         in    varchar2,    --被赋权的角色
    str_core_user    in    varchar2,    --数据库对象所有者
    i_priv_manage    in    integer      --0: revoke 1: grant
)
as
    cur_sql            number;
    str_grant_sql      varchar2(2000);
    err_num            number;
    err_msg            varchar2(1000);

    cursor cur_query1(i_num integer) is
    select decode(i_num,0,'revoke ',1,'grant ') ||
           'select,insert,update,delete on '|| str_core_user||'.'||object_name||
           decode(i_num,0,' from ',1,' to ')   || str_role grantstr
      from user_objects
      where object_type in ('TABLE', 'VIEW') and status = 'VALID';

    cursor cur_query2(i_num integer) is
    select decode(i_num,0,'revoke ',1,'grant ') ||
           'execute,debug on '|| str_core_user||'.'||object_name||
           decode(i_num,0,' from ',1,' to ')|| str_role grantstr
      from user_objects
      where object_type in ('PROCEDURE', 'FUNCTION', 'PACKAGE') and status = 'VALID';

    cursor cur_query3(i_num integer) is
    select decode(i_num,0,'revoke ',1,'grant ') ||
           'select on '|| str_core_user||'.'||object_name||
           decode(i_num,0,' from ',1,' to ')|| str_role grantstr
      from user_objects
      where object_type in ('SEQUENCE') and status = 'VALID';

begin

    dbms_output.put_line('<<<<<<<<<ROLE: all modules readable/writable BEGIN>>>>>>>>>>>');
    dbms_output.put_line('Preparing ...');

    cur_sql := dbms_sql.open_cursor;

    for rec in cur_query1(i_priv_manage)
    loop
        str_grant_sql := rec.grantstr;
		dbms_output.put_line(str_grant_sql);
        dbms_sql.parse(cur_sql, str_grant_sql, dbms_sql.v7);
    end loop;

    dbms_sql.close_cursor(cur_sql);

    dbms_output.put_line('<<<<<<<<<<<<<<<ROLE: all modules readable/writable END>>>>>>>>>>>>>>>>');

    dbms_output.put_line('<<<<<<<<<<<<<<ROLE: procedures/functions executable/debugable BEGIN>>>>>>>>>>>>>>>');
    dbms_output.put_line('Preparing ...');

    cur_sql := dbms_sql.open_cursor;

    for rec in cur_query2(i_priv_manage)
    loop
        str_grant_sql := rec.grantstr;
		dbms_output.put_line(str_grant_sql);
        dbms_sql.parse(cur_sql, str_grant_sql, dbms_sql.v7);
    end loop;

    dbms_sql.close_cursor(cur_sql);

    dbms_output.put_line('<<<<<<<<<<<<<<<ROLE: procedures/functions executable/debugable END>>>>>>>>>>>>>>>>');

    dbms_output.put_line('<<<<<<<<<<<<<<ROLE: sequence select BEGIN>>>>>>>>>>>>>>>');
    dbms_output.put_line('Preparing ...');

    cur_sql := dbms_sql.open_cursor;

    for rec in cur_query3(i_priv_manage)
    loop
        str_grant_sql := rec.grantstr;
		dbms_output.put_line(str_grant_sql);
        dbms_sql.parse(cur_sql, str_grant_sql, dbms_sql.v7);
    end loop;

    dbms_sql.close_cursor(cur_sql);

    dbms_output.put_line('<<<<<<<<<<<<<<<ROLE: sequence select END>>>>>>>>>>>>>>>>');

exception
    when others then
        dbms_output.put_line('<<<<<<<<<<<<<<<Grant Provilige To Application User Account Error>>>>>>>>>>>>>>>>');
        err_num := sqlcode;
        err_msg := substr(sqlerrm, 1, 1000);
        dbms_output.put_line('sqlcode: '||err_num||', errmsg: '||err_msg);

end app_user_account;
/

-- ----------------------------
-- Procedure structure for BDI_COPY_TABLE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SERVICEDB"."BDI_COPY_TABLE"
(
  tablename_old in varchar2,
  tablename_new in varchar2
)
IS
v_count integer;
BEGIN
     select count(*) into v_count from user_tables where upper(table_name)=upper(tablename_new);
    if v_count > 0 then
        EXECUTE IMMEDIATE 'truncate table '||UPPER(tablename_new);
        EXECUTE IMMEDIATE 'INSERT INTO '||UPPER(tablename_new)||' SELECT * FROM '||UPPER(tablename_old);
        commit;
    end if;
END;
/

-- ----------------------------
-- Procedure structure for BDI_FUN_COPY_TABLE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SERVICEDB"."BDI_FUN_COPY_TABLE"
(
  vi_newuser    in varchar2,
  vi_olduser    in varchar2,
  vi_newtable   in varchar2,
  vi_oldtable   in varchar2
)
IS
v_count integer;
v_common_fields varchar2(4000);
BEGIN
    select count(*) into v_count from all_tables where upper(table_name)=upper(vi_oldtable) and OWNER=upper(vi_olduser);
    if v_count > 0 then
      select  get_column_name(vi_newuser,vi_olduser,vi_newtable,vi_oldtable) into v_common_fields from dual;

        EXECUTE IMMEDIATE 'truncate table '||UPPER(vi_newtable);
        EXECUTE IMMEDIATE 'INSERT INTO '||UPPER(vi_newtable)||'('||v_common_fields||') SELECT '||v_common_fields||' FROM '||UPPER(vi_olduser)||'.'||UPPER(vi_oldtable);
        commit;
    end if;
END;
/

-- ----------------------------
-- Procedure structure for BDI_MERGE_TABLE
-- ----------------------------
CREATE OR REPLACE PROCEDURE "SERVICEDB"."BDI_MERGE_TABLE"
(
  tablename_old in varchar2,
  tablename_new in varchar2,
  clo1 in varchar2
)
IS
BEGIN
    EXECUTE IMMEDIATE 'INSERT INTO '||UPPER(tablename_new)||' SELECT * FROM '||UPPER(tablename_old)||' where '||clo1||' not in(select '||clo1||' from '||tablename_new||')';
END;
/

-- ----------------------------
-- Function structure for GET_COLUMN_NAME
-- ----------------------------
CREATE OR REPLACE function "SERVICEDB"."GET_COLUMN_NAME"(vi_newuser  varchar2,
                                          vi_olduser  varchar2,
                                          vi_newtable   varchar2,
                                           vi_oldtable varchar2)
  return varchar2 is
  vv_column_names varchar2(4000);
begin

  select listagg(a.COLUMN_NAME, ',') within group(order by a.COLUMN_ID)
    into vv_column_names
    from all_tab_columns a, all_tab_columns b

   where a.OWNER = upper(vi_newuser)
     and b.OWNER = upper(vi_olduser)
     and a.TABLE_NAME = upper(vi_newtable)
     and b.TABLE_NAME = upper(vi_oldtable)
     and a.COLUMN_NAME = b.COLUMN_NAME;
  return vv_column_names;

end;
/

-- ----------------------------
-- Indexes structure for table T_BPM_ACTIVITYTRACE
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_ACTIVITYTRACE"
ON "SERVICEDB"."T_BPM_ACTIVITYTRACE" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_ACTIVITYTRACE"
ON "SERVICEDB"."T_BPM_ACTIVITYTRACE" ("MAINPID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table T_BPM_ACTIVITYTRACE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_ACTIVITYTRACE" ADD PRIMARY KEY ("ACTIVITYTRACEID");

-- ----------------------------
-- Indexes structure for table T_BPM_BRANCHEXECUTION
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_BRANCHEXECUTION"
ON "SERVICEDB"."T_BPM_BRANCHEXECUTION" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_BRANCHEXECUTION"
ON "SERVICEDB"."T_BPM_BRANCHEXECUTION" ("PARENTEXECUTIONID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_BRANCHEXECUTION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION" ADD CHECK ("BRANCHSTATE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION" ADD CHECK ("PREVIOUSSTATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_BRANCHEXECUTION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION" ADD PRIMARY KEY ("BRANCHEXECUTIONID");

-- ----------------------------
-- Checks structure for table T_BPM_BRANCHEXECUTION_BAK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION_BAK" ADD CHECK ("BRANCHSTATE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_BRANCHEXECUTION_BAK" ADD CHECK ("PREVIOUSSTATE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table T_BPM_CLUSTER_LOCKS
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_CLUSTER_LOCKS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_CLUSTER_LOCKS" ADD PRIMARY KEY ("LOCKNAME", "ENGINENAME", "NODEGROUPNAME");

-- ----------------------------
-- Indexes structure for table T_BPM_CLUSTERNODEINFO
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_CLUSTERNODEINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_CLUSTERNODEINFO" ADD PRIMARY KEY ("IPADDRESS", "PORT", "PROCESSENGINENAME");

-- ----------------------------
-- Indexes structure for table T_BPM_COLLABORATIONDEFINITION
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_BPM_COLLABORATIONDEFINITION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION" ADD CHECK ("COLLABORATIONID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION" ADD CHECK ("DEFINITION" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_COLLABORATIONDEFINITION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_COLLABORATIONDEFINITION" ADD PRIMARY KEY ("COLLABORATIONID", "VERSION");

-- ----------------------------
-- Indexes structure for table T_BPM_COMMENT
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_COMMENT"
ON "SERVICEDB"."T_BPM_COMMENT" ("TASKID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_COMMENT"
ON "SERVICEDB"."T_BPM_COMMENT" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_COMMENT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_COMMENT" ADD CHECK ("PROCESSINSTANCEID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_COMMENT" ADD CHECK ("COMMENTTEXT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_COMMENT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_COMMENT" ADD PRIMARY KEY ("COMMENTID");

-- ----------------------------
-- Indexes structure for table T_BPM_CUST_ACT_VARS
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_CUST_ACT_VARS"
ON "SERVICEDB"."T_BPM_CUST_ACT_VARS" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_CUST_ACT_VARS"
ON "SERVICEDB"."T_BPM_CUST_ACT_VARS" ("ACTIVITYTRACEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_CUST_ACT_VARS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_CUST_ACT_VARS" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID", "ACTIVITYTRACEID");

-- ----------------------------
-- Indexes structure for table T_BPM_CUST_VAR_SPLIT
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_CUST_VAR_SPLIT"
ON "SERVICEDB"."T_BPM_CUST_VAR_SPLIT" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_CUST_VAR_SPLIT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_CUST_VAR_SPLIT" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID", "ROW_ORDER");

-- ----------------------------
-- Indexes structure for table T_BPM_CUSTOM_VARIABLES
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_CUSTOM_VARIABLES"
ON "SERVICEDB"."T_BPM_CUSTOM_VARIABLES" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_CUSTOM_VARIABLES
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_CUSTOM_VARIABLES" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID");

-- ----------------------------
-- Indexes structure for table T_BPM_CUSTOMVARSTRACE
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_CUSTVARTRCE_PID"
ON "SERVICEDB"."T_BPM_CUSTOMVARSTRACE" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_CUSTOMVARSTRACE"
ON "SERVICEDB"."T_BPM_CUSTOMVARSTRACE" ("ACTIVITYTRACEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_ENGINECONFIG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_ENGINECONFIG" ADD UNIQUE ("CONFIGURATIONNAME", "PROCESSENGINENAME", "CLUSTERNODEID");

-- ----------------------------
-- Indexes structure for table T_BPM_EVENT_CUST_DATA
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_EVENT_CUST_DATSETID"
ON "SERVICEDB"."T_BPM_EVENT_CUST_DATA" ("DATASETID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table T_BPM_EVENT_PRIM_DATA
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_EVENT_PRIM_DATSETID"
ON "SERVICEDB"."T_BPM_EVENT_PRIM_DATA" ("DATASETID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table T_BPM_EVENTDEFINITION
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_EVENTDEFKEY"
ON "SERVICEDB"."T_BPM_EVENTDEFINITION" ("EVENTDEFKEY" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_EVENTDEFINITION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" ADD CHECK ("EVENTDEFID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" ADD CHECK ("EVENTDEFKEY" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" ADD CHECK ("ELEMENTID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" ADD CHECK ("EVENTKEY" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" ADD CHECK ("HANDLER" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" ADD CHECK ("ELEMENTTYPE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" ADD CHECK ("EVENTTYPE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" ADD CHECK ("ELEMENTSTATUS" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_EVENTDEFINITION" ADD CHECK ("PROCESSENGINENAME" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table T_BPM_EVENTINSTANCE
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_EVENTINST_CORKEY"
ON "SERVICEDB"."T_BPM_EVENTINSTANCE" ("CORELATIONKEY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_T_BPM_EVENTINST_RCVPID"
ON "SERVICEDB"."T_BPM_EVENTINSTANCE" ("RECEIVERPID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_T_BPM_EVENTINST_SENDPID"
ON "SERVICEDB"."T_BPM_EVENTINSTANCE" ("SENDERPID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table T_BPM_EXCEPTIONINFO
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_BPM_EXCPINFO_BEID"
ON "SERVICEDB"."T_BPM_EXCEPTIONINFO" ("BRANCHEXECUTIONID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_T_BPM_EXCPINFO_MPID"
ON "SERVICEDB"."T_BPM_EXCEPTIONINFO" ("MAINPROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_EXCEPTIONINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_EXCEPTIONINFO" ADD UNIQUE ("ACTIVITYTRACEID", "BRANCHEXECUTIONID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_ACTIVITYTRACE
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_ACT_TRACE"
ON "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_HIST_ACT_TRACE"
ON "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE" ("MAINPID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_ACTIVITYTRACE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_ACTIVITYTRACE" ADD PRIMARY KEY ("ACTIVITYTRACEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_BRANCHEXECUTION
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_BR_EXEC"
ON "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_HIST_BRANCHEXECUTION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION" ADD CHECK ("BRANCHSTATE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION" ADD CHECK ("PREVIOUSSTATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_BRANCHEXECUTION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_BRANCHEXECUTION" ADD PRIMARY KEY ("BRANCHEXECUTIONID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_COMMENT
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_COMMENT"
ON "SERVICEDB"."T_BPM_HIST_COMMENT" ("TASKID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_HIST_COMMENT"
ON "SERVICEDB"."T_BPM_HIST_COMMENT" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_HIST_COMMENT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_COMMENT" ADD CHECK ("PROCESSINSTANCEID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_HIST_COMMENT" ADD CHECK ("COMMENTTEXT" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_COMMENT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_COMMENT" ADD PRIMARY KEY ("COMMENTID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_CUST_ACT_VARS
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_H_CUST_ACT_VARS"
ON "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_H_CUST_ACT_VARS"
ON "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS" ("ACTIVITYTRACEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_HIST_CUST_ACT_VARS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_CUST_ACT_VARS" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID", "ACTIVITYTRACEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_CUST_VAR_SPLIT
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX1_T_BPM_HIST_CUSTVAR_SPLT"
ON "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_HIST_CUST_VAR_SPLIT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_CUST_VAR_SPLIT" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID", "ROW_ORDER");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_CUSTOM_VARIABLES
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_CUST_VARS"
ON "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_HIST_CUSTOM_VARIABLES
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_CUSTOM_VARIABLES" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_CUSTOMVARSTRACE
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_HIST_CUSTVARTRCE_PID"
ON "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_CUSTOMVARS"
ON "SERVICEDB"."T_BPM_HIST_CUSTOMVARSTRACE" ("ACTIVITYTRACEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_EXCEPTIONINFO
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_BPM_HIST_EXCPINFO_BEID"
ON "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO" ("BRANCHEXECUTIONID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_T_BPM_HIST_EXCPINFO_MPID"
ON "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO" ("MAINPROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_HIST_EXCEPTIONINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_EXCEPTIONINFO" ADD UNIQUE ("ACTIVITYTRACEID", "BRANCHEXECUTIONID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_HT_ASSIGNEE
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_HT_ASSIGNEE"
ON "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE" ("TASKID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_HIST_HT_ASSIGNEE"
ON "SERVICEDB"."T_BPM_HIST_HT_ASSIGNEE" ("ASSIGNEEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_HT_DEADLINE
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_HT_DEADLINE"
ON "SERVICEDB"."T_BPM_HIST_HT_DEADLINE" ("TASKID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_HT_DEADLINE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_HT_DEADLINE" ADD PRIMARY KEY ("DEADLINEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_HT_EVENTDATA
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_BPM_HIST_HT_EVENTDATA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA" ADD CHECK ("TASKID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_HT_EVENTDATA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTDATA" ADD PRIMARY KEY ("EVENTLOGID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_HT_EVENTLOG
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_HT_EVENTLOG"
ON "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG" ("TASKID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_HIST_HT_EVENTLOG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG" ADD CHECK ("TASKID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_HT_EVENTLOG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_HT_EVENTLOG" ADD PRIMARY KEY ("EVENTLOGID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_HT_TASK
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_HT_TASK"
ON "SERVICEDB"."T_BPM_HIST_HT_TASK" ("OWNERID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_HIST_HT_TASK"
ON "SERVICEDB"."T_BPM_HIST_HT_TASK" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_HIST_HT_TASK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_HT_TASK" ADD CHECK ("TASKID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_HIST_HT_TASK" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_HT_TASK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_HT_TASK" ADD PRIMARY KEY ("TASKID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_HT_VARIABLES
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_HT_VARIABLES
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_HT_VARIABLES" ADD PRIMARY KEY ("TASKID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_MOVE_STATISTICS
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_BPM_HIST_MOVE_STATISTICS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS" ADD CHECK ("HISTORYID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_MOVE_STATISTICS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_MOVE_STATISTICS" ADD PRIMARY KEY ("HISTORYID", "TYPE", "PROCESSENGINENAME");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_PRIM_ACT_VARS
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_H_PRIM_ACT_VARS"
ON "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_H_PRIM_ACT_VARS"
ON "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS" ("ACTIVITYTRACEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_HIST_PRIM_ACT_VARS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_PRIM_ACT_VARS" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID", "ACTIVITYTRACEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_PRIMITIVE_VARIABLES
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_PRIM_VARS"
ON "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_HIST_PRIMITIVE_VARIABLES
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_PRIMITIVE_VARIABLES" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_PROCESSINSTANCE
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_HIST_PROC_INST_MPID"
ON "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE" ("MAINPROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_T_BPM_HIST_PROC_INST_PDKEY"
ON "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE" ("PROCESSDEFKEY" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_PROC_INST"
ON "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE" ("CREATORID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_HIST_PROCESSINSTANCE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE" ADD CHECK ("PROCESSSTATE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE" ADD CHECK ("PREVIOUSSTATE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE" ADD CHECK ("RUNNINGSTATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HIST_PROCESSINSTANCE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HIST_PROCESSINSTANCE" ADD PRIMARY KEY ("PROCESSINSTANCEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HIST_VARIABLESTRACE
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_HIST_VARS_TRACE_PID"
ON "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HIST_VARS_TRACE"
ON "SERVICEDB"."T_BPM_HIST_VARIABLESTRACE" ("ACTIVITYTRACEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table T_BPM_HT_ASSIGNEE
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HT_ASSIGNEE"
ON "SERVICEDB"."T_BPM_HT_ASSIGNEE" ("TASKID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_HT_ASSIGNEE"
ON "SERVICEDB"."T_BPM_HT_ASSIGNEE" ("ASSIGNEEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table T_BPM_HT_DEADLINE
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HT_DEADLINE"
ON "SERVICEDB"."T_BPM_HT_DEADLINE" ("TASKID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_DEADLINE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_DEADLINE" ADD PRIMARY KEY ("DEADLINEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_EVENTDATA
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_BPM_HT_EVENTDATA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_EVENTDATA" ADD CHECK ("TASKID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_EVENTDATA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_EVENTDATA" ADD PRIMARY KEY ("EVENTLOGID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_EVENTLOG
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HT_EVENTLOG"
ON "SERVICEDB"."T_BPM_HT_EVENTLOG" ("TASKID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_HT_EVENTLOG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_EVENTLOG" ADD CHECK ("TASKID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_EVENTLOG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_EVENTLOG" ADD PRIMARY KEY ("EVENTLOGID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_GROUP
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_GROUP
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_GROUP" ADD PRIMARY KEY ("GROUPID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_GROUPMEMBER
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX_T_BPM_HT_GROUPMEMBER"
ON "SERVICEDB"."T_BPM_HT_GROUPMEMBER" ("USERID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_GROUPMEMBER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_GROUPMEMBER" ADD PRIMARY KEY ("GROUPID", "USERID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_GROUPSUBGROUP
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX_T_BPM_HT_GROUPSUBGROUP"
ON "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP" ("SUBGROUPID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_GROUPSUBGROUP
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP" ADD PRIMARY KEY ("GROUPID", "SUBGROUPID");

-- ----------------------------
-- Checks structure for table T_BPM_HT_HANDOVER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_HANDOVER" ADD CHECK ("FROMUSERID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_HT_HANDOVER" ADD CHECK ("TOUSERID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table T_BPM_HT_LOGICALGROUP
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_LOGICALGROUP
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUP" ADD PRIMARY KEY ("LOGICALGROUPID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_LOGICALGROUPMEMBER
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX_T_BPM_HT_LGLGRPMEMBER"
ON "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER" ("USERID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_LOGICALGROUPMEMBER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER" ADD PRIMARY KEY ("LOGICALGROUPID", "USERID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_LOGICALGROUPROLE
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX_T_BPM_HT_LOGICALGRPROLE"
ON "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE" ("ROLEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_LOGICALGROUPROLE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE" ADD PRIMARY KEY ("LOGICALGROUPID", "ROLEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_ROLE
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_ROLE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_ROLE" ADD PRIMARY KEY ("ROLEID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_ROLEMEMBER
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX_T_BPM_HT_ROLEMEMBER"
ON "SERVICEDB"."T_BPM_HT_ROLEMEMBER" ("USERID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_ROLEMEMBER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_ROLEMEMBER" ADD PRIMARY KEY ("ROLEID", "USERID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_TASK
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_HT_TASK"
ON "SERVICEDB"."T_BPM_HT_TASK" ("OWNERID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_HT_TASK"
ON "SERVICEDB"."T_BPM_HT_TASK" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX3_T_BPM_HT_TASK"
ON "SERVICEDB"."T_BPM_HT_TASK" ("ACTIVITYDEFID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_HT_TASK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_TASK" ADD CHECK ("TASKID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_HT_TASK" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_TASK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_TASK" ADD PRIMARY KEY ("TASKID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_USER
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_USER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_USER" ADD PRIMARY KEY ("USERID");

-- ----------------------------
-- Indexes structure for table T_BPM_HT_VARIABLES
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_HT_VARIABLES
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_VARIABLES" ADD PRIMARY KEY ("TASKID");

-- ----------------------------
-- Indexes structure for table T_BPM_JOB_QUEUE
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_JOB_QUEUE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_JOB_QUEUE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_BPM_MARSHALLERS
-- ----------------------------

-- ----------------------------
-- Uniques structure for table T_BPM_MARSHALLERS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_MARSHALLERS" ADD UNIQUE ("MARSHALLERCLASS");

-- ----------------------------
-- Primary Key structure for table T_BPM_MARSHALLERS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_MARSHALLERS" ADD PRIMARY KEY ("MARSHALLERID");

-- ----------------------------
-- Indexes structure for table T_BPM_PDBUSINESSDATAEXTN
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_PDBUSINESSDATAEXTN
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_PDBUSINESSDATAEXTN" ADD PRIMARY KEY ("PROCESSDEFKEY", "BIZEXTPARAMNAME");

-- ----------------------------
-- Indexes structure for table T_BPM_PRIM_ACT_VARS
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_PRIM_ACT_VARS"
ON "SERVICEDB"."T_BPM_PRIM_ACT_VARS" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_PRIM_ACT_VARS"
ON "SERVICEDB"."T_BPM_PRIM_ACT_VARS" ("ACTIVITYTRACEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_PRIM_ACT_VARS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_PRIM_ACT_VARS" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID", "ACTIVITYTRACEID");

-- ----------------------------
-- Indexes structure for table T_BPM_PRIMITIVE_VARIABLES
-- ----------------------------
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_PRIM_VARIABLES"
ON "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Uniques structure for table T_BPM_PRIMITIVE_VARIABLES
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_PRIMITIVE_VARIABLES" ADD UNIQUE ("BRANCHEXECUTIONID", "VARIABLEID");

-- ----------------------------
-- Indexes structure for table T_BPM_PROCESSDEFINITION
-- ----------------------------

-- ----------------------------
-- Uniques structure for table T_BPM_PROCESSDEFINITION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION" ADD UNIQUE ("PROCESSDEFID", "VERSION");

-- ----------------------------
-- Checks structure for table T_BPM_PROCESSDEFINITION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION" ADD CHECK ("PROCESSDEFID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION" ADD CHECK ("DEFINITION" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_PROCESSDEFINITION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION" ADD PRIMARY KEY ("PROCESSDEFKEY");

-- ----------------------------
-- Checks structure for table T_BPM_PROCESSDEFINITION_BAK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION_BAK" ADD CHECK ("PROCESSDEFID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION_BAK" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION_BAK" ADD CHECK ("DEFINITION" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSDEFINITION_BAK" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table T_BPM_PROCESSINSTANCE
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_PROCESSINSTANCE_RS"
ON "SERVICEDB"."T_BPM_PROCESSINSTANCE" ("RUNNINGSTATUS" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_T_BPM_PROC_INST_CREAT_TIME"
ON "SERVICEDB"."T_BPM_PROCESSINSTANCE" ("CREATETIME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_PROCESSINSTANCE"
ON "SERVICEDB"."T_BPM_PROCESSINSTANCE" ("CREATORID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_PROCESSINSTANCE"
ON "SERVICEDB"."T_BPM_PROCESSINSTANCE" ("MAINPROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_PROCESSINSTANCE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSINSTANCE" ADD CHECK ("PROCESSSTATE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSINSTANCE" ADD CHECK ("PREVIOUSSTATE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSINSTANCE" ADD CHECK ("RUNNINGSTATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_PROCESSINSTANCE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_PROCESSINSTANCE" ADD PRIMARY KEY ("PROCESSINSTANCEID");

-- ----------------------------
-- Indexes structure for table T_BPM_SEQ_GEN
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_BPM_SEQ_GEN
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_SEQ_GEN" ADD CHECK ("SEQUENCEVALUE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_SEQ_GEN" ADD CHECK ("CONCURRENTLOCK" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_SEQ_GEN
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_SEQ_GEN" ADD PRIMARY KEY ("SEQUENCEVALUE");

-- ----------------------------
-- Indexes structure for table T_BPM_SYSTEM_CONFIG
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_SYSTEM_CONFIG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_SYSTEM_CONFIG" ADD PRIMARY KEY ("NAME");

-- ----------------------------
-- Indexes structure for table T_BPM_TIMER
-- ----------------------------
CREATE UNIQUE INDEX "SERVICEDB"."IDX_T_BPM_TIMER_APPID"
ON "SERVICEDB"."T_BPM_TIMER" ("TIMERAPPID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_T_BPM_TIMER_STARTTIME"
ON "SERVICEDB"."T_BPM_TIMER" ("STARTTIME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX2_T_BPM_TIMER"
ON "SERVICEDB"."T_BPM_TIMER" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_BPM_TIMER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_TIMER" ADD CHECK ("TIMERAPPID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_TIMER" ADD CHECK ("MODULENAME" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_BPM_TIMER" ADD CHECK ("CALLBACKCLASSNAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_BPM_TIMER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_TIMER" ADD PRIMARY KEY ("TASKID");

-- ----------------------------
-- Indexes structure for table T_BPM_TRACELINKMSGDATA
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_BPM_TRACELINKMSGDATA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_TRACELINKMSGDATA" ADD PRIMARY KEY ("MAINPROCESSINSTANCEID");

-- ----------------------------
-- Indexes structure for table T_BPM_VARIABLESTRACE
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_BPM_VAR_TRACE_PID"
ON "SERVICEDB"."T_BPM_VARIABLESTRACE" ("PROCESSINSTANCEID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."INDEX1_T_BPM_VARIABLESTRACE"
ON "SERVICEDB"."T_BPM_VARIABLESTRACE" ("ACTIVITYTRACEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Indexes structure for table T_HDI_CUSTOMVIEW
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_CUSTOMVIEW
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_CUSTOMVIEW" ADD PRIMARY KEY ("VIEWID");

-- ----------------------------
-- Indexes structure for table T_HDI_DATAFIELD
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_DATAFIELD
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_DATAFIELD" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_DATAFIELD" ADD CHECK ("GROUPNAME" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_DATAFIELD" ADD CHECK ("FIELDNAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_DATAFIELD
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_DATAFIELD" ADD PRIMARY KEY ("ID", "GROUPNAME", "FIELDNAME");

-- ----------------------------
-- Indexes structure for table T_HDI_DATAFLTMPLT
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_DATAFLTMPLT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_DATAFLTMPLT" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_DATAFLTMPLT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_DATAFLTMPLT" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_DATATYPE
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_DATATYPE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_DATATYPE" ADD PRIMARY KEY ("DATATYPEID");

-- ----------------------------
-- Indexes structure for table T_HDI_FLATFILEDEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_FLATFILEDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLATFILEDEF" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_FLATFILEDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLATFILEDEF" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_FLOWEXESTATE
-- ----------------------------
CREATE INDEX "SERVICEDB"."CREATEDTIME"
ON "SERVICEDB"."T_HDI_FLOWEXESTATE" ("CREATEDTIME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."FLOWID"
ON "SERVICEDB"."T_HDI_FLOWEXESTATE" ("FLOWID" ASC, "STARTDATATIME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_HDI_FLOWEXESTATE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWEXESTATE" ADD CHECK ("INSTID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_FLOWEXESTATE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWEXESTATE" ADD PRIMARY KEY ("INSTID");

-- ----------------------------
-- Indexes structure for table T_HDI_FLOWINFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_FLOWINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWINFO" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_FLOWINFO" ADD CHECK ("APPLYTIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_FLOWINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWINFO" ADD PRIMARY KEY ("ID", "APPLYTIME");

-- ----------------------------
-- Checks structure for table T_HDI_FLOWINFO_BAK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWINFO_BAK" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_FLOWINFO_BAK" ADD CHECK ("APPLYTIME" IS NOT NULL);

-- ----------------------------
-- Checks structure for table T_HDI_FLOWINFO_BAK191204
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWINFO_BAK191204" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_FLOWINFO_BAK191204" ADD CHECK ("APPLYTIME" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table T_HDI_FLOWINST
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_FLOWINST
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWINST" ADD PRIMARY KEY ("INSTID");

-- ----------------------------
-- Indexes structure for table T_HDI_FLOWONLINEINFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_FLOWONLINEINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWONLINEINFO" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_FLOWONLINEINFO" ADD CHECK ("FLOWID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_FLOWONLINEINFO" ADD CHECK ("APPLYTIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_FLOWONLINEINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWONLINEINFO" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_FLOWPARAM
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_FLOWPARAM
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWPARAM" ADD CHECK ("FLOWID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_FLOWPARAM" ADD CHECK ("VERSION" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_FLOWPARAM" ADD CHECK ("PARAMID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_FLOWPARAM
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWPARAM" ADD PRIMARY KEY ("FLOWID", "APPLYTIME", "PARAMID");

-- ----------------------------
-- Indexes structure for table T_HDI_FLOWRUNFLG
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_FLOWRUNFLG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWRUNFLG" ADD CHECK ("FLOWID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_FLOWRUNFLG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWRUNFLG" ADD PRIMARY KEY ("FLOWID");

-- ----------------------------
-- Indexes structure for table T_HDI_FLOWRUNSTAT
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_FLOWRUNSTAT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FLOWRUNSTAT" ADD PRIMARY KEY ("RUNDATE");

-- ----------------------------
-- Indexes structure for table T_HDI_FUNCTION
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_FUNCTION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FUNCTION" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_FUNCTION
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_FUNCTION" ADD PRIMARY KEY ("NAME", "STATUS");

-- ----------------------------
-- Indexes structure for table T_HDI_HOTFLOWINST
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_HOTFLOW_FLOWDEF"
ON "SERVICEDB"."T_HDI_HOTFLOWINST" ("FLOWID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_HOTFLOW_FLOWINST"
ON "SERVICEDB"."T_HDI_HOTFLOWINST" ("INSTID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_HDI_HOTFLOWINST
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_HOTFLOWINST" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_HOTFLOWINST" ADD CHECK ("FLOWID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_HOTFLOWINST
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_HOTFLOWINST" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_HDI_HOTFLOWINST_BAK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_HOTFLOWINST_BAK" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_HOTFLOWINST_BAK" ADD CHECK ("FLOWID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table T_HDI_INTERLOG
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_INTERLOG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_INTERLOG" ADD CHECK ("LOGKEY" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_INTERLOG" ADD CHECK ("SERIALNO" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_INTERLOG" ADD CHECK ("CMDTYPE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_INTERLOG" ADD CHECK ("INTERFROM" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_INTERLOG" ADD CHECK ("PROCESSTAG" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_INTERLOG" ADD CHECK ("REMOTEADDRESS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_INTERLOG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_INTERLOG" ADD PRIMARY KEY ("LOGKEY");

-- ----------------------------
-- Indexes structure for table T_HDI_MASTER_NODE
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_MASTER_NODE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_MASTER_NODE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_MASTER_NODE" ADD CHECK ("VERSION" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_MASTER_NODE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_MASTER_NODE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_METARIGHT
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_METARIGHT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_METARIGHT" ADD CHECK ("METARIGHTID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_METARIGHT" ADD CHECK ("PACKAGEID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_METARIGHT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_METARIGHT" ADD PRIMARY KEY ("METARIGHTID");

-- ----------------------------
-- Checks structure for table T_HDI_MR_RIGHT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_MR_RIGHT" ADD CHECK ("METARIGHTID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table T_HDI_MRRIGHT
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_MRRIGHT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_MRRIGHT" ADD PRIMARY KEY ("METARIGHTID", "ID");

-- ----------------------------
-- Indexes structure for table T_HDI_MSGINFO
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_MSGINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_MSGINFO" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_MSGTASKREL
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_MSGTASKREL
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_MSGTASKREL" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_NODE_MANAGER
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_NODE_MANAGER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_NODE_MANAGER" ADD CHECK ("LOCK_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_NODE_MANAGER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_NODE_MANAGER" ADD PRIMARY KEY ("LOCK_ID");

-- ----------------------------
-- Indexes structure for table T_HDI_NOTES
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_NOTES
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_NOTES" ADD PRIMARY KEY ("FLOWID", "NOTEID");

-- ----------------------------
-- Indexes structure for table T_HDI_NOTIFYMSG
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_NOTIFYMSG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_NOTIFYMSG" ADD PRIMARY KEY ("NOTIFYINFOKEY_ID");

-- ----------------------------
-- Indexes structure for table T_HDI_OPERLOG
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_OPERLOG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_OPERLOG" ADD PRIMARY KEY ("LOGID");

-- ----------------------------
-- Indexes structure for table T_HDI_OPERLOGBAK
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_OPERLOGBAK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_OPERLOGBAK" ADD PRIMARY KEY ("LOGID");

-- ----------------------------
-- Indexes structure for table T_HDI_PACKAGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_PACKAGE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_PACKAGE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_PACKAGE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_PACKAGE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_PSDEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_PSDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_PSDEF" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_PSDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_PSDEF" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_RESDEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_RESDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESDEF" ADD CHECK ("RESOURCETYPE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_RESDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESDEF" ADD PRIMARY KEY ("RESOURCETYPE");

-- ----------------------------
-- Indexes structure for table T_HDI_RESMONCFG
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_RESMONCFG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESMONCFG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_RESMONSEND
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_RESMONSEND
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESMONSEND" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_RESSNAPCFG
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_RESSNAPCFG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESSNAPCFG" ADD PRIMARY KEY ("SNAPID");

-- ----------------------------
-- Indexes structure for table T_HDI_RESSNAPINFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_RESSNAPINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESSNAPINFO" ADD CHECK ("SNAPID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_RESSNAPINFO" ADD CHECK ("SNAP_DATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_RESSNAPINFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESSNAPINFO" ADD PRIMARY KEY ("SNAPID", "SNAP_DATE");

-- ----------------------------
-- Indexes structure for table T_HDI_RESUSAGE
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_RESUSAGE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESUSAGE" ADD CHECK ("RESOURCETYPE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_RESUSAGE" ADD CHECK ("FLOWID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_RESUSAGE" ADD CHECK ("TASKID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_RESUSAGE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESUSAGE" ADD PRIMARY KEY ("RESOURCETYPE", "FLOWID", "TASKID");

-- ----------------------------
-- Indexes structure for table T_HDI_ROLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_ROLE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_ROLE" ADD CHECK ("ROLEID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_ROLE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_ROLE" ADD PRIMARY KEY ("ROLEID");

-- ----------------------------
-- Indexes structure for table T_HDI_ROLE_USER
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_ROLE_USER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_ROLE_USER" ADD CHECK ("USERID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_ROLE_USER" ADD CHECK ("ROLEID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_ROLE_USER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_ROLE_USER" ADD PRIMARY KEY ("USERID", "ROLEID");

-- ----------------------------
-- Indexes structure for table T_HDI_ROLEGROUP
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_ROLEGROUP
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_ROLEGROUP" ADD PRIMARY KEY ("GROUPID");

-- ----------------------------
-- Indexes structure for table T_HDI_ROLEMENUREL
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_ROLEMENUREL
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_ROLEMENUREL" ADD PRIMARY KEY ("METARIGHTID");

-- ----------------------------
-- Indexes structure for table T_HDI_ROLEPKGREL
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_ROLEPKGREL
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_ROLEPKGREL" ADD PRIMARY KEY ("METARIGHTID");

-- ----------------------------
-- Indexes structure for table T_HDI_SCHEDULE
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_SCHEDULE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_SCHEDULE" ADD CHECK ("CTRLFLOWID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_SCHEDULE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_SCHEDULE" ADD PRIMARY KEY ("CTRLFLOWID", "APPLYTIME");

-- ----------------------------
-- Indexes structure for table T_HDI_SPARKSUMIT_INFO
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_SPARKSUMIT_INFO_NODEID"
ON "SERVICEDB"."T_HDI_SPARKSUMIT_INFO" ("NODEID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_HDI_SPARKSUMIT_INFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_SPARKSUMIT_INFO" ADD CHECK ("PROCESSINSTANCEID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_SPARKSUMIT_INFO" ADD CHECK ("TIME" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_SPARKSUMIT_INFO" ADD CHECK ("NODEID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_SPARKSUMIT_INFO" ADD CHECK ("STATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_SPARKSUMIT_INFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_SPARKSUMIT_INFO" ADD PRIMARY KEY ("PROCESSINSTANCEID");

-- ----------------------------
-- Checks structure for table T_HDI_SR_ROLE_LINK
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_SR_ROLE_LINK" ADD CHECK ("ROLEID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table T_HDI_STREAM_AM_RECORD
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_STREAM_AM_RECORD
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" ADD CHECK ("CLUSTERNAME" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" ADD CHECK ("APPID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" ADD CHECK ("CCHOST" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" ADD CHECK ("CCPORT" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" ADD CHECK ("OWNER" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" ADD CHECK ("EXPIRETIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_STREAM_AM_RECORD
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_AM_RECORD" ADD PRIMARY KEY ("CLUSTERNAME");

-- ----------------------------
-- Indexes structure for table T_HDI_STREAM_DATAFIELD
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_STREAM_DATAFIELD
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_DATAFIELD" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_DATAFIELD" ADD CHECK ("GROUPNAME" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_DATAFIELD" ADD CHECK ("FIELDNAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_STREAM_DATAFIELD
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_DATAFIELD" ADD PRIMARY KEY ("ID", "GROUPNAME", "FIELDNAME");

-- ----------------------------
-- Indexes structure for table T_HDI_STREAM_MEMORY_DATAFIELD
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_STREAM_MEMORY_DATAFIELD
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_MEMORY_DATAFIELD" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_MEMORY_DATAFIELD" ADD CHECK ("GROUPNAME" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_MEMORY_DATAFIELD" ADD CHECK ("FIELDNAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_STREAM_MEMORY_DATAFIELD
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_MEMORY_DATAFIELD" ADD PRIMARY KEY ("ID", "GROUPNAME", "FIELDNAME");

-- ----------------------------
-- Indexes structure for table T_HDI_STREAM_MEMORYTABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_STREAM_MEMORYTABLE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_MEMORYTABLE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_MEMORYTABLE" ADD CHECK ("ISRELEASE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_STREAM_MEMORYTABLE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_MEMORYTABLE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_STREAM_XDRTABLE
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_STREAM_XDRTABLE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_XDRTABLE" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_XDRTABLE" ADD CHECK ("ISDEBUG" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_XDRTABLE" ADD CHECK ("ISRELEASE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_STREAM_XDRTABLE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAM_XDRTABLE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_STREAMING_PUBLISHLOG
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDEX1_T_STREAMING_PUBLISHLOG"
ON "SERVICEDB"."T_HDI_STREAMING_PUBLISHLOG" ("PUBLISH_TIME" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_HDI_STREAMING_PUBLISHLOG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAMING_PUBLISHLOG" ADD CHECK ("LOGID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAMING_PUBLISHLOG" ADD CHECK ("PUBLISH_TIME" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAMING_PUBLISHLOG" ADD CHECK ("XDRID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAMING_PUBLISHLOG" ADD CHECK ("PUBLISH_DATA" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_STREAMING_PUBLISHLOG" ADD CHECK ("STATUS" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_STREAMING_PUBLISHLOG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_STREAMING_PUBLISHLOG" ADD PRIMARY KEY ("LOGID", "XDRID");

-- ----------------------------
-- Indexes structure for table T_HDI_SYSPARAM
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_SYSPARAM
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_SYSPARAM" ADD CHECK ("NAME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_SYSPARAM
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_SYSPARAM" ADD PRIMARY KEY ("NAME", "STATUS");

-- ----------------------------
-- Indexes structure for table T_HDI_TABLEDEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_TABLEDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TABLEDEF" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_TABLEDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TABLEDEF" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_TASKDEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_TASKDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TASKDEF" ADD CHECK ("CTRLFLOWID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_TASKDEF" ADD CHECK ("TASKID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_TASKDEF" ADD CHECK ("APPLYTIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_TASKDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TASKDEF" ADD PRIMARY KEY ("CTRLFLOWID", "TASKID", "APPLYTIME");

-- ----------------------------
-- Checks structure for table T_HDI_TASKEXEAVERTIME
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TASKEXEAVERTIME" ADD CHECK ("PACKAGEID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_TASKEXEAVERTIME" ADD CHECK ("TASKID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_TASKEXEAVERTIME" ADD CHECK ("FLOWID" IS NOT NULL);

-- ----------------------------
-- Indexes structure for table T_HDI_TASKEXESTATE
-- ----------------------------
CREATE INDEX "SERVICEDB"."IDX_T_HDI_TASKEXESTATE_DATE"
ON "SERVICEDB"."T_HDI_TASKEXESTATE" ("STARTDATATIME" ASC, "ENDDATATIME" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_T_HDI_TASKEXESTATE_FLOWID"
ON "SERVICEDB"."T_HDI_TASKEXESTATE" ("FLOWID" ASC)
LOGGING
VISIBLE;
CREATE INDEX "SERVICEDB"."IDX_T_HDI_TASKEXESTATE_TASKD"
ON "SERVICEDB"."T_HDI_TASKEXESTATE" ("TASKID" ASC)
LOGGING
VISIBLE;

-- ----------------------------
-- Checks structure for table T_HDI_TASKEXESTATE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TASKEXESTATE" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_TASKEXESTATE
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TASKEXESTATE" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_TASKMSGCFG
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_TASKMSGCFG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TASKMSGCFG" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Indexes structure for table T_HDI_TASKRELAT
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_TASKRELAT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TASKRELAT" ADD CHECK ("ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_TASKRELAT" ADD CHECK ("APPLYTIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_TASKRELAT
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TASKRELAT" ADD PRIMARY KEY ("ID", "APPLYTIME");

-- ----------------------------
-- Indexes structure for table T_HDI_TMPLTPARAM
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_TMPLTPARAM
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TMPLTPARAM" ADD CHECK ("TMPLTID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_TMPLTPARAM" ADD CHECK ("PARAMID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_TMPLTPARAM
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_TMPLTPARAM" ADD PRIMARY KEY ("TMPLTID", "PARAMID");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_CONFIG
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_CONFIG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" ADD CHECK ("NOTIYRECORDCOUNT" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" ADD CHECK ("PERIODCOUNT" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" ADD CHECK ("PERIODMINUTE" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" ADD CHECK ("DELAYSECOND" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" ADD CHECK ("EXPIREDSECOND" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" ADD CHECK ("XDRTHREADCOUNT" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" ADD CHECK ("SCANSECOND" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_CONFIG
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_CONFIG" ADD PRIMARY KEY ("NOTIYRECORDCOUNT");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_DA_INFO
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_DA_INFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_DA_INFO" ADD CHECK ("DA_ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_DA_INFO" ADD CHECK ("DA_IP" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_DA_INFO
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_DA_INFO" ADD PRIMARY KEY ("DA_ID");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_MASTER
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_MASTER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_MASTER" ADD CHECK ("HOST_IP" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_MASTER" ADD CHECK ("EXPIREDATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_MASTER
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_MASTER" ADD PRIMARY KEY ("HOST_IP");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_METADATA
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_METADATA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_METADATA" ADD CHECK ("XDR_ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_METADATA" ADD CHECK ("XDR_INFO" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_METADATA" ADD CHECK ("PUBLISH_TIME" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_METADATA" ADD CHECK ("EFFECT_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_METADATA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_METADATA" ADD PRIMARY KEY ("XDR_ID");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_NODES
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_NODES
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_NODES" ADD CHECK ("HOST_IP" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_NODES" ADD CHECK ("EXPIREDATE" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_NODES
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_NODES" ADD PRIMARY KEY ("HOST_IP");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_SNAPSHOT_FAILEDDA
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_SNAPSHOT_FAILEDDA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FAILEDDA" ADD CHECK ("SNAPSHOT_ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FAILEDDA" ADD CHECK ("DA_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_SNAPSHOT_FAILEDDA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FAILEDDA" ADD PRIMARY KEY ("SNAPSHOT_ID", "DA_ID");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_SNAPSHOT_FLOWS
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_SNAPSHOT_FLOWS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FLOWS" ADD CHECK ("SNAPSHOT_ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FLOWS" ADD CHECK ("FLOW_ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_SNAPSHOT_FLOWS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_FLOWS" ADD PRIMARY KEY ("SNAPSHOT_ID", "FLOW_ID");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_SNAPSHOT_MDA
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_SNAPSHOT_MDA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_MDA" ADD CHECK ("SNAPSHOT_ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_MDA" ADD CHECK ("MDA_INFO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_SNAPSHOT_MDA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_MDA" ADD PRIMARY KEY ("SNAPSHOT_ID");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_SNAPSHOT_METADATA
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_SNAPSHOT_METADATA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_METADATA" ADD CHECK ("SNAPSHOT_ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_METADATA" ADD CHECK ("XDR_ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_METADATA" ADD CHECK ("XDR_INFO" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_SNAPSHOT_METADATA
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_METADATA" ADD PRIMARY KEY ("SNAPSHOT_ID", "XDR_ID");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_SNAPSHOT_NOTIFY
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_SNAPSHOT_NOTIFY
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_NOTIFY" ADD CHECK ("SNAPSHOT_ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_NOTIFY" ADD CHECK ("HOST_IP" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_SNAPSHOT_NOTIFY
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOT_NOTIFY" ADD PRIMARY KEY ("SNAPSHOT_ID", "HOST_IP");

-- ----------------------------
-- Indexes structure for table T_HDI_VCU_SNAPSHOTS
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_VCU_SNAPSHOTS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOTS" ADD CHECK ("SNAPSHOT_ID" IS NOT NULL);
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOTS" ADD CHECK ("SNAPSHOT_TIME" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_VCU_SNAPSHOTS
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VCU_SNAPSHOTS" ADD PRIMARY KEY ("SNAPSHOT_ID");

-- ----------------------------
-- Indexes structure for table T_HDI_VIEWCTRLREL
-- ----------------------------

-- ----------------------------
-- Primary Key structure for table T_HDI_VIEWCTRLREL
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_VIEWCTRLREL" ADD PRIMARY KEY ("VIEWID", "CTRLFLOWID");

-- ----------------------------
-- Indexes structure for table T_HDI_XMLFILEDEF
-- ----------------------------

-- ----------------------------
-- Checks structure for table T_HDI_XMLFILEDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_XMLFILEDEF" ADD CHECK ("ID" IS NOT NULL);

-- ----------------------------
-- Primary Key structure for table T_HDI_XMLFILEDEF
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_XMLFILEDEF" ADD PRIMARY KEY ("ID");

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_BPM_HT_GROUPMEMBER"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_GROUPMEMBER" ADD FOREIGN KEY ("GROUPID") REFERENCES "SERVICEDB"."T_BPM_HT_GROUP" ("GROUPID");
ALTER TABLE "SERVICEDB"."T_BPM_HT_GROUPMEMBER" ADD FOREIGN KEY ("USERID") REFERENCES "SERVICEDB"."T_BPM_HT_USER" ("USERID");

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP" ADD FOREIGN KEY ("GROUPID") REFERENCES "SERVICEDB"."T_BPM_HT_GROUP" ("GROUPID");
ALTER TABLE "SERVICEDB"."T_BPM_HT_GROUPSUBGROUP" ADD FOREIGN KEY ("SUBGROUPID") REFERENCES "SERVICEDB"."T_BPM_HT_GROUP" ("GROUPID");

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER" ADD FOREIGN KEY ("LOGICALGROUPID") REFERENCES "SERVICEDB"."T_BPM_HT_LOGICALGROUP" ("LOGICALGROUPID");
ALTER TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPMEMBER" ADD FOREIGN KEY ("USERID") REFERENCES "SERVICEDB"."T_BPM_HT_USER" ("USERID");

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE" ADD FOREIGN KEY ("LOGICALGROUPID") REFERENCES "SERVICEDB"."T_BPM_HT_LOGICALGROUP" ("LOGICALGROUPID");
ALTER TABLE "SERVICEDB"."T_BPM_HT_LOGICALGROUPROLE" ADD FOREIGN KEY ("ROLEID") REFERENCES "SERVICEDB"."T_BPM_HT_ROLE" ("ROLEID");

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_BPM_HT_ROLEMEMBER"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_BPM_HT_ROLEMEMBER" ADD FOREIGN KEY ("ROLEID") REFERENCES "SERVICEDB"."T_BPM_HT_ROLE" ("ROLEID");
ALTER TABLE "SERVICEDB"."T_BPM_HT_ROLEMEMBER" ADD FOREIGN KEY ("USERID") REFERENCES "SERVICEDB"."T_BPM_HT_USER" ("USERID");

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_HDI_METARIGHT"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_METARIGHT" ADD FOREIGN KEY ("ROLEID") REFERENCES "SERVICEDB"."T_HDI_ROLE" ("ROLEID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_HDI_MR_RIGHT"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_MR_RIGHT" ADD FOREIGN KEY ("METARIGHTID") REFERENCES "SERVICEDB"."T_HDI_METARIGHT" ("METARIGHTID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_HDI_RESSNAPINFO"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_RESSNAPINFO" ADD FOREIGN KEY ("SNAPID") REFERENCES "SERVICEDB"."T_HDI_RESSNAPCFG" ("SNAPID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_HDI_ROLE_USER"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_ROLE_USER" ADD FOREIGN KEY ("ROLEID") REFERENCES "SERVICEDB"."T_HDI_ROLE" ("ROLEID") ON DELETE CASCADE;

-- ----------------------------
-- Foreign Key structure for table "SERVICEDB"."T_HDI_SR_ROLE_LINK"
-- ----------------------------
ALTER TABLE "SERVICEDB"."T_HDI_SR_ROLE_LINK" ADD FOREIGN KEY ("ROLEID") REFERENCES "SERVICEDB"."T_HDI_ROLE" ("ROLEID") ON DELETE CASCADE;
